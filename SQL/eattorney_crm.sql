--
-- Script was generated by Devart dbForge Studio for MySQL, Version 9.2.128.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 1/12/2024 4:43:57 PM
-- Server version: 10.5.9
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE eattorney_crm;

--
-- Drop table `etl_settings`
--
DROP TABLE IF EXISTS etl_settings;

--
-- Drop procedure `etl_Company1_master`
--
DROP PROCEDURE IF EXISTS etl_Company1_master;

--
-- Drop procedure `etl_Company2_master`
--
DROP PROCEDURE IF EXISTS etl_Company2_master;

--
-- Drop procedure `etl_Company3_master`
--
DROP PROCEDURE IF EXISTS etl_Company3_master;

--
-- Drop procedure `etl_phone`
--
DROP PROCEDURE IF EXISTS etl_phone;

--
-- Drop procedure `etl_phone_full`
--
DROP PROCEDURE IF EXISTS etl_phone_full;

--
-- Drop function `f_clean_phone_number`
--
DROP FUNCTION IF EXISTS f_clean_phone_number;

--
-- Drop procedure `log_service_action`
--
DROP PROCEDURE IF EXISTS log_service_action;

--
-- Drop table `service_log`
--
DROP TABLE IF EXISTS service_log;

--
-- Drop table `dim_logged_info_type`
--
DROP TABLE IF EXISTS dim_logged_info_type;

--
-- Drop procedure `populate_dimensions`
--
DROP PROCEDURE IF EXISTS populate_dimensions;

--
-- Drop table `excel_mapping`
--
DROP TABLE IF EXISTS excel_mapping;

--
-- Drop procedure `etl_borrower`
--
DROP PROCEDURE IF EXISTS etl_borrower;

--
-- Drop procedure `etl_borrower_full`
--
DROP PROCEDURE IF EXISTS etl_borrower_full;

--
-- Drop procedure `etl_borrower_manual_update`
--
DROP PROCEDURE IF EXISTS etl_borrower_manual_update;

--
-- Drop procedure `etl_borrower_manual_update_full`
--
DROP PROCEDURE IF EXISTS etl_borrower_manual_update_full;

--
-- Drop procedure `etl_borrower_update`
--
DROP PROCEDURE IF EXISTS etl_borrower_update;

--
-- Drop function `f_excel_full_name_to_json`
--
DROP FUNCTION IF EXISTS f_excel_full_name_to_json;

--
-- Drop procedure `etl_activity`
--
DROP PROCEDURE IF EXISTS etl_activity;

--
-- Drop procedure `etl_activity_full`
--
DROP PROCEDURE IF EXISTS etl_activity_full;

--
-- Drop procedure `etl_loan`
--
DROP PROCEDURE IF EXISTS etl_loan;

--
-- Drop procedure `etl_loan_contragent_info`
--
DROP PROCEDURE IF EXISTS etl_loan_contragent_info;

--
-- Drop procedure `etl_loan_contragent_info_full`
--
DROP PROCEDURE IF EXISTS etl_loan_contragent_info_full;

--
-- Drop procedure `etl_loan_full`
--
DROP PROCEDURE IF EXISTS etl_loan_full;

--
-- Drop function `f_excel_str_to_date_en_us`
--
DROP FUNCTION IF EXISTS f_excel_str_to_date_en_us;

--
-- Drop procedure `etl_loan_expenses`
--
DROP PROCEDURE IF EXISTS etl_loan_expenses;

--
-- Drop procedure `etl_loan_expenses_full`
--
DROP PROCEDURE IF EXISTS etl_loan_expenses_full;

--
-- Drop procedure `etl_payment`
--
DROP PROCEDURE IF EXISTS etl_payment;

--
-- Drop procedure `etl_payment_full`
--
DROP PROCEDURE IF EXISTS etl_payment_full;

--
-- Drop procedure `etl_trial`
--
DROP PROCEDURE IF EXISTS etl_trial;

--
-- Drop procedure `etl_trial_full`
--
DROP PROCEDURE IF EXISTS etl_trial_full;

--
-- Drop function `f_excel_str_to_decimal_en_us`
--
DROP FUNCTION IF EXISTS f_excel_str_to_decimal_en_us;

--
-- Drop function `f_excel_str_to_date_uk`
--
DROP FUNCTION IF EXISTS f_excel_str_to_date_uk;

--
-- Drop view `v_phone_info`
--
DROP VIEW IF EXISTS v_phone_info CASCADE;

--
-- Drop table `phone`
--
DROP TABLE IF EXISTS phone;

--
-- Drop table `dim_phone_status`
--
DROP TABLE IF EXISTS dim_phone_status;

--
-- Drop table `dim_phone_type`
--
DROP TABLE IF EXISTS dim_phone_type;

--
-- Drop view `v_address_info`
--
DROP VIEW IF EXISTS v_address_info CASCADE;

--
-- Drop view `v_borrower_info`
--
DROP VIEW IF EXISTS v_borrower_info CASCADE;

--
-- Drop procedure `etl_address`
--
DROP PROCEDURE IF EXISTS etl_address;

--
-- Drop procedure `etl_address_full`
--
DROP PROCEDURE IF EXISTS etl_address_full;

--
-- Drop procedure `etl_addresses_from_loan_info_file`
--
DROP PROCEDURE IF EXISTS etl_addresses_from_loan_info_file;

--
-- Drop table `address`
--
DROP TABLE IF EXISTS address;

--
-- Drop table `dim_address_type`
--
DROP TABLE IF EXISTS dim_address_type;

--
-- Drop view `v_activity_info`
--
DROP VIEW IF EXISTS v_activity_info CASCADE;

--
-- Drop view `v_loan_general_info`
--
DROP VIEW IF EXISTS v_loan_general_info CASCADE;

--
-- Drop table `activity`
--
DROP TABLE IF EXISTS activity;

--
-- Drop table `dim_activity_type`
--
DROP TABLE IF EXISTS dim_activity_type;

--
-- Drop view `v_model_pmt_info`
--
DROP VIEW IF EXISTS v_model_pmt_info CASCADE;

--
-- Drop view `v_payment_info`
--
DROP VIEW IF EXISTS v_payment_info CASCADE;

--
-- Drop view `v_r_main_report_payments`
--
DROP VIEW IF EXISTS v_r_main_report_payments CASCADE;

--
-- Drop view `v_r_payments_by_days`
--
DROP VIEW IF EXISTS v_r_payments_by_days CASCADE;

--
-- Drop view `v_r_private_executors`
--
DROP VIEW IF EXISTS v_r_private_executors CASCADE;

--
-- Drop view `v_r_main_report_general`
--
DROP VIEW IF EXISTS v_r_main_report_general CASCADE;

--
-- Drop view `v_r_vintage_info`
--
DROP VIEW IF EXISTS v_r_vintage_info CASCADE;

--
-- Drop view `v_r_vintage_list`
--
DROP VIEW IF EXISTS v_r_vintage_list CASCADE;

--
-- Drop procedure `r_short_report`
--
DROP PROCEDURE IF EXISTS r_short_report;

--
-- Drop view `v_r_payments_list`
--
DROP VIEW IF EXISTS v_r_payments_list CASCADE;

--
-- Drop view `v_r_prepayment_return_list`
--
DROP VIEW IF EXISTS v_r_prepayment_return_list CASCADE;

--
-- Drop procedure `process_payments`
--
DROP PROCEDURE IF EXISTS process_payments;

--
-- Drop table `payment`
--
DROP TABLE IF EXISTS payment;

--
-- Drop table `dim_payment_type`
--
DROP TABLE IF EXISTS dim_payment_type;

--
-- Drop table `dim_match_type`
--
DROP TABLE IF EXISTS dim_match_type;

--
-- Drop table `loan_calculated_debt`
--
DROP TABLE IF EXISTS loan_calculated_debt;

--
-- Drop view `v_loan_contragent_info`
--
DROP VIEW IF EXISTS v_loan_contragent_info CASCADE;

--
-- Drop view `v_r_main_report_list`
--
DROP VIEW IF EXISTS v_r_main_report_list CASCADE;

--
-- Drop table `loan_contragent_info`
--
DROP TABLE IF EXISTS loan_contragent_info;

--
-- Drop view `v_loan_expenses_info`
--
DROP VIEW IF EXISTS v_loan_expenses_info CASCADE;

--
-- Drop table `loan_expenses`
--
DROP TABLE IF EXISTS loan_expenses;

--
-- Drop table `predicted_next_payment`
--
DROP TABLE IF EXISTS predicted_next_payment;

--
-- Drop view `v_trial_info`
--
DROP VIEW IF EXISTS v_trial_info CASCADE;

--
-- Drop table `trial`
--
DROP TABLE IF EXISTS trial;

--
-- Drop view `v_borrowers_loans_links`
--
DROP VIEW IF EXISTS v_borrowers_loans_links CASCADE;

--
-- Drop view `v_loan_info`
--
DROP VIEW IF EXISTS v_loan_info CASCADE;

--
-- Drop view `v_search_results`
--
DROP VIEW IF EXISTS v_search_results CASCADE;

--
-- Drop table `loan`
--
DROP TABLE IF EXISTS loan;

--
-- Drop table `dim_company`
--
DROP TABLE IF EXISTS dim_company;

--
-- Drop table `dim_letter_status`
--
DROP TABLE IF EXISTS dim_letter_status;

--
-- Drop table `dim_loan_status`
--
DROP TABLE IF EXISTS dim_loan_status;

--
-- Drop table `borrower`
--
DROP TABLE IF EXISTS borrower;

--
-- Drop table `etl_log`
--
DROP TABLE IF EXISTS etl_log;

--
-- Drop table `staging_activity`
--
DROP TABLE IF EXISTS staging_activity;

--
-- Drop table `staging_address`
--
DROP TABLE IF EXISTS staging_address;

--
-- Drop table `staging_borrower_update_info`
--
DROP TABLE IF EXISTS staging_borrower_update_info;

--
-- Drop table `staging_contragent_info`
--
DROP TABLE IF EXISTS staging_contragent_info;

--
-- Drop table `staging_loan_expenses`
--
DROP TABLE IF EXISTS staging_loan_expenses;

--
-- Drop table `staging_loan_initial_info`
--
DROP TABLE IF EXISTS staging_loan_initial_info;

--
-- Drop table `staging_payment`
--
DROP TABLE IF EXISTS staging_payment;

--
-- Drop table `staging_phone`
--
DROP TABLE IF EXISTS staging_phone;

--
-- Drop table `staging_trial`
--
DROP TABLE IF EXISTS staging_trial;

--
-- Drop procedure `insert_upload_log`
--
DROP PROCEDURE IF EXISTS insert_upload_log;

--
-- Drop table `upload_log`
--
DROP TABLE IF EXISTS upload_log;

--
-- Drop procedure `get_user_info`
--
DROP PROCEDURE IF EXISTS get_user_info;

--
-- Drop table `dim_user`
--
DROP TABLE IF EXISTS dim_user;

--
-- Drop table `dim_user_role`
--
DROP TABLE IF EXISTS dim_user_role;

--
-- Set default database
--
USE eattorney_crm;

--
-- Create table `dim_user_role`
--
CREATE TABLE dim_user_role (
  user_role_id INT(11) NOT NULL AUTO_INCREMENT,
  user_role_name VARCHAR(30) NOT NULL,
  PRIMARY KEY (user_role_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `user_role_name` on table `dim_user_role`
--
ALTER TABLE dim_user_role 
  ADD UNIQUE INDEX user_role_name(user_role_name);

--
-- Create table `dim_user`
--
CREATE TABLE dim_user (
  user_id INT(11) NOT NULL AUTO_INCREMENT,
  user_role_id INT(11) NOT NULL,
  user_name VARCHAR(50) DEFAULT NULL,
  pwd_hash CHAR(60) NOT NULL,
  email VARCHAR(100) DEFAULT NULL,
  is_mfa_enabled BIT(1) NOT NULL DEFAULT b'1',
  otac BIGINT(20) DEFAULT NULL,
  otac_expires_at DATETIME DEFAULT NULL,
  PRIMARY KEY (user_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE dim_user 
  ADD CONSTRAINT dim_user_ibfk_1 FOREIGN KEY (user_role_id)
    REFERENCES dim_user_role(user_role_id);

DELIMITER $$

--
-- Create procedure `get_user_info`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE get_user_info(IN _user_name varchar(50), _otac_exp_minutes int)
BEGIN

SELECT
  user_id,
  is_mfa_enabled INTO @user_id, @is_mfa_enabled
FROM dim_user
WHERE user_name = _user_name;

  IF @is_mfa_enabled = 1 THEN
UPDATE dim_user
SET otac = ROUND((RAND() * (999999 - 100000)) + 100000),
    otac_expires_at = DATE_ADD(NOW(), INTERVAL _otac_exp_minutes MINUTE)
WHERE user_id = @user_id;
END IF;

SELECT
  user_id,
  user_name,
  pwd_hash,
  email,
  is_mfa_enabled,
  otac,
  otac_expires_at
FROM dim_user
WHERE user_id = @user_id;

END
$$

DELIMITER ;

--
-- Create table `upload_log`
--
CREATE TABLE upload_log (
  upload_id INT(11) NOT NULL AUTO_INCREMENT,
  source_file_name VARCHAR(250) NOT NULL,
  target_table_name VARCHAR(64) NOT NULL,
  fields_provided LONGTEXT BINARY CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`fields_provided`)),
  archive_file_path VARCHAR(500) NOT NULL,
  total_records INT(11) NOT NULL DEFAULT 0,
  valid_records INT(11) NOT NULL DEFAULT 0,
  user_id INT(11) DEFAULT NULL,
  upload_datetime DATETIME DEFAULT current_timestamp(),
  PRIMARY KEY (upload_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2985,
AVG_ROW_LENGTH = 547,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Create procedure `insert_upload_log`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE insert_upload_log(IN source_file varchar(250),
IN target_table varchar(64),
IN fields_json json,
IN archive_path varchar(500))
BEGIN

  SET @total_count_sql = CONCAT('SELECT COUNT(1) INTO @total_records FROM ', target_table, ';');
  PREPARE stmt FROM @total_count_sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  SET @valid_count_sql = CONCAT('SELECT COUNT(1) INTO @valid_records FROM ', target_table, ' WHERE is_valid = 1;');
  PREPARE stmt FROM @valid_count_sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  START TRANSACTION;

INSERT INTO upload_log (source_file_name, target_table_name, fields_provided, archive_file_path, total_records, valid_records)
  SELECT
    source_file,
    target_table,
    fields_json,
    archive_path,
    @total_records,
    @valid_records;

    SET @upload_id = @@last_insert_id;
    SET @update_log_id_sql = CONCAT('UPDATE ', target_table, ' SET upload_id = @upload_id;');
    PREPARE stmt FROM @update_log_id_sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

  COMMIT;

END
$$

DELIMITER ;

--
-- Create table `staging_trial`
--
CREATE TABLE staging_trial (
  company VARCHAR(250) DEFAULT NULL,
  borrower_full_name TEXT DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  borrower_ssn TEXT DEFAULT NULL,
  loan_number TEXT DEFAULT NULL,
  total_debt TEXT DEFAULT NULL,
  Initial_creditor TEXT DEFAULT NULL,
  contact_phone_number TEXT DEFAULT NULL,
  trial_number TEXT DEFAULT NULL,
  execution_number TEXT DEFAULT NULL,
  court_name TEXT DEFAULT NULL,
  claim_date TEXT DEFAULT NULL,
  trial_stage TEXT DEFAULT NULL,
  court_decision_promulgation_date TEXT DEFAULT NULL,
  comments TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_trial 
  ADD CONSTRAINT staging_trial_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_trial 
  ADD CONSTRAINT staging_trial_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_phone`
--
CREATE TABLE staging_phone (
  company VARCHAR(250) DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  phone_number TEXT DEFAULT NULL,
  phone_type TEXT DEFAULT NULL,
  phone_status TEXT DEFAULT NULL,
  last_rpc_date TEXT DEFAULT NULL,
  last_ptp_date TEXT DEFAULT NULL,
  comment TEXT DEFAULT NULL,
  priority TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_phone 
  ADD CONSTRAINT staging_phone_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_phone 
  ADD CONSTRAINT staging_phone_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_payment`
--
CREATE TABLE staging_payment (
  company VARCHAR(250) DEFAULT NULL,
  payment_date TEXT DEFAULT NULL,
  payment_amount TEXT DEFAULT NULL,
  contragent_name TEXT DEFAULT NULL,
  payment_details TEXT DEFAULT NULL,
  document_no TEXT DEFAULT NULL,
  debit_iban TEXT DEFAULT NULL,
  credit_iban TEXT DEFAULT NULL,
  bank_code TEXT DEFAULT NULL,
  contragent_code TEXT DEFAULT NULL,
  borrower_ssn TEXT DEFAULT NULL,
  execution_number TEXT DEFAULT NULL,
  loan_number TEXT DEFAULT NULL,
  borrower_full_name TEXT DEFAULT NULL,
  inscriptionNumber TEXT DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  payment_source TEXT DEFAULT NULL,
  payment_type TEXT DEFAULT NULL,
  match_type TEXT DEFAULT NULL,
  private_executor_found TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1444,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_payment 
  ADD CONSTRAINT staging_payment_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_payment 
  ADD CONSTRAINT staging_payment_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_loan_initial_info`
--
CREATE TABLE staging_loan_initial_info (
  company VARCHAR(250) DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  priority TEXT DEFAULT NULL,
  box_number TEXT DEFAULT NULL,
  contracts_count TEXT DEFAULT NULL,
  has_contract TEXT DEFAULT NULL,
  loan_status TEXT DEFAULT NULL,
  letter_status TEXT DEFAULT NULL,
  letter_date TEXT DEFAULT NULL,
  borrower_full_name TEXT DEFAULT NULL,
  borrower_ssn TEXT DEFAULT NULL,
  loan_number TEXT DEFAULT NULL,
  birth_date TEXT DEFAULT NULL,
  birth_place TEXT DEFAULT NULL,
  registration_address TEXT DEFAULT NULL,
  work_place TEXT DEFAULT NULL,
  passport_number TEXT DEFAULT NULL,
  passport_issuer TEXT DEFAULT NULL,
  loan_date TEXT DEFAULT NULL,
  loan_amount TEXT DEFAULT NULL,
  last_payment_date TEXT DEFAULT NULL,
  letter_payoff_date TEXT DEFAULT NULL,
  total_debt_wo_penalty TEXT DEFAULT NULL,
  total_debt_wo_penalty_words TEXT DEFAULT NULL,
  total_debt TEXT DEFAULT NULL,
  total_debt_words TEXT DEFAULT NULL,
  principal_debt TEXT DEFAULT NULL,
  principal_debt_words TEXT DEFAULT NULL,
  interest_debt TEXT DEFAULT NULL,
  interest_debt_words TEXT DEFAULT NULL,
  commission_debt TEXT DEFAULT NULL,
  commission_debt_words TEXT DEFAULT NULL,
  penalty_debt TEXT DEFAULT NULL,
  penalty_debt_words TEXT DEFAULT NULL,
  inscription_cost TEXT DEFAULT NULL,
  inscription_cost_words TEXT DEFAULT NULL,
  total_debt_w_inscription TEXT DEFAULT NULL,
  total_debt_wInscription_words TEXT DEFAULT NULL,
  initial_creditor TEXT DEFAULT NULL,
  initial_concession TEXT DEFAULT NULL,
  next_consession_aval TEXT DEFAULT NULL,
  fct_to_ams_concession TEXT DEFAULT NULL,
  previous_creditor TEXT DEFAULT NULL,
  current_creditor TEXT DEFAULT NULL,
  current_concession_number TEXT DEFAULT NULL,
  current_concession_date TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_loan_initial_info 
  ADD CONSTRAINT staging_loan_initial_info_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_loan_initial_info 
  ADD CONSTRAINT staging_loan_initial_info_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_loan_expenses`
--
CREATE TABLE staging_loan_expenses (
  company VARCHAR(250) DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  debit_iban TEXT DEFAULT NULL,
  credit_iban TEXT DEFAULT NULL,
  bank_code TEXT DEFAULT NULL,
  contragent_name TEXT DEFAULT NULL,
  contragent_code TEXT DEFAULT NULL,
  payment_details TEXT DEFAULT NULL,
  payment_date TEXT DEFAULT NULL,
  document_no TEXT DEFAULT NULL,
  payment_amount TEXT DEFAULT NULL,
  payment_type TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_loan_expenses 
  ADD CONSTRAINT staging_loan_expenses_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_loan_expenses 
  ADD CONSTRAINT staging_loan_expenses_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_contragent_info`
--
CREATE TABLE staging_contragent_info (
  company VARCHAR(250) DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  borrower_ssn TEXT DEFAULT NULL,
  borrower_full_name TEXT DEFAULT NULL,
  birth_date TEXT DEFAULT NULL,
  registration_address TEXT DEFAULT NULL,
  total_debt TEXT DEFAULT NULL,
  prepayment_amount TEXT DEFAULT NULL,
  prepayment_return_amount TEXT DEFAULT NULL,
  total_payments_amount TEXT DEFAULT NULL,
  inscription_number TEXT DEFAULT NULL,
  inscription_date TEXT DEFAULT NULL,
  notary TEXT DEFAULT NULL,
  transfer_date TEXT DEFAULT NULL,
  prepayment_order_date TEXT DEFAULT NULL,
  prepayment_confirmation_date TEXT DEFAULT NULL,
  region TEXT DEFAULT NULL,
  private_executor_name TEXT DEFAULT NULL,
  loan_status TEXT DEFAULT NULL,
  documents_transfer_date TEXT DEFAULT NULL,
  days_for_execution_opening TEXT DEFAULT NULL,
  days_for_salary_deduction_transfer TEXT DEFAULT NULL,
  execution_opening_date TEXT DEFAULT NULL,
  execution_number TEXT DEFAULT NULL,
  access_id TEXT DEFAULT NULL,
  transferred_to_executor TEXT DEFAULT NULL,
  execution_opened TEXT DEFAULT NULL,
  salary_deduction_transferred TEXT DEFAULT NULL,
  income_found TEXT DEFAULT NULL,
  income_not_found TEXT DEFAULT NULL,
  information_not_available TEXT DEFAULT NULL,
  salary_deduction_document_date TEXT DEFAULT NULL,
  general_income_info TEXT DEFAULT NULL,
  salary_deduction_fail_reason TEXT DEFAULT NULL,
  income_check_second_request_date TEXT DEFAULT NULL,
  income_check_second_request_result TEXT DEFAULT NULL,
  execution_has_payments TEXT DEFAULT NULL,
  prepayment_return_control TEXT DEFAULT NULL,
  discount_closure TEXT DEFAULT NULL,
  registry_number TEXT DEFAULT NULL,
  check_needed TEXT DEFAULT NULL,
  additional_checks_status TEXT DEFAULT NULL,
  additional_checks_number TEXT DEFAULT NULL,
  has_payments TEXT DEFAULT NULL,
  comment TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_contragent_info 
  ADD CONSTRAINT staging_contragent_info_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_contragent_info 
  ADD CONSTRAINT staging_contragent_info_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_borrower_update_info`
--
CREATE TABLE staging_borrower_update_info (
  company VARCHAR(250) DEFAULT NULL,
  borrower_full_name TEXT DEFAULT NULL,
  borrower_ssn TEXT DEFAULT NULL,
  birth_date TEXT DEFAULT NULL,
  birth_place TEXT DEFAULT NULL,
  work_place TEXT DEFAULT NULL,
  passport_number TEXT DEFAULT NULL,
  passport_issuer TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_borrower_update_info 
  ADD CONSTRAINT staging_borrower_update_info_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_borrower_update_info 
  ADD CONSTRAINT staging_borrower_update_info_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_address`
--
CREATE TABLE staging_address (
  company VARCHAR(250) DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  address_type TEXT DEFAULT NULL,
  zip_code TEXT DEFAULT NULL,
  region TEXT DEFAULT NULL,
  district TEXT DEFAULT NULL,
  city TEXT DEFAULT NULL,
  street TEXT DEFAULT NULL,
  house_appartment TEXT DEFAULT NULL,
  priority TEXT DEFAULT NULL,
  address_id TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_address 
  ADD CONSTRAINT staging_address_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_address 
  ADD CONSTRAINT staging_address_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `staging_activity`
--
CREATE TABLE staging_activity (
  company VARCHAR(250) DEFAULT NULL,
  loan_id TEXT DEFAULT NULL,
  activity_date TEXT DEFAULT NULL,
  activity_details TEXT DEFAULT NULL,
  answer_date TEXT DEFAULT NULL,
  borrower_full_name TEXT DEFAULT NULL,
  borrower_ssn TEXT DEFAULT NULL,
  loan_number TEXT DEFAULT NULL,
  loan_date TEXT DEFAULT NULL,
  address TEXT DEFAULT NULL,
  debt_amount TEXT DEFAULT NULL,
  bank TEXT DEFAULT NULL,
  notes TEXT DEFAULT NULL,
  is_valid BIT(1) NOT NULL DEFAULT b'0',
  validation_info VARCHAR(1000) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  user_id INT(11) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE staging_activity 
  ADD CONSTRAINT staging_activity_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE staging_activity 
  ADD CONSTRAINT staging_activity_ibfk_2 FOREIGN KEY (user_id)
    REFERENCES dim_user(user_id);

--
-- Create table `etl_log`
--
CREATE TABLE etl_log (
  etl_id INT(11) NOT NULL AUTO_INCREMENT,
  stored_procedure_name VARCHAR(64) NOT NULL,
  records_inserted INT(11) NOT NULL,
  records_updated INT(11) NOT NULL,
  updload_id INT(11) NOT NULL,
  etl_datetime DATETIME DEFAULT current_timestamp(),
  PRIMARY KEY (etl_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2826,
AVG_ROW_LENGTH = 69,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE etl_log 
  ADD CONSTRAINT etl_log_ibfk_1 FOREIGN KEY (updload_id)
    REFERENCES upload_log(upload_id);

--
-- Create table `borrower`
--
CREATE TABLE borrower (
  borrower_id INT(11) NOT NULL AUTO_INCREMENT,
  borrower_id_ext VARCHAR(30) NOT NULL,
  ssn VARCHAR(20) DEFAULT NULL,
  first_name VARCHAR(25) DEFAULT NULL,
  middle_name VARCHAR(25) DEFAULT NULL,
  last_name VARCHAR(50) DEFAULT NULL,
  full_name VARCHAR(100) DEFAULT NULL,
  birth_date DATE DEFAULT NULL,
  birth_place VARCHAR(100) DEFAULT NULL,
  work_place VARCHAR(255) DEFAULT NULL,
  passport_number VARCHAR(20) DEFAULT NULL,
  passport_issuer VARCHAR(150) DEFAULT NULL,
  passport_issue_date DATE DEFAULT NULL,
  is_manually_updated BIT(1) NOT NULL,
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (borrower_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 103759,
AVG_ROW_LENGTH = 390,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `ix_borrower_id_ext` on table `borrower`
--
ALTER TABLE borrower 
  ADD INDEX ix_borrower_id_ext(borrower_id_ext);

--
-- Create foreign key
--
ALTER TABLE borrower 
  ADD CONSTRAINT borrower_ibfk_1 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE borrower 
  ADD CONSTRAINT borrower_ibfk_2 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

--
-- Create table `dim_loan_status`
--
CREATE TABLE dim_loan_status (
  loan_status_id INT(11) NOT NULL AUTO_INCREMENT,
  loan_status_name VARCHAR(250) NOT NULL,
  PRIMARY KEY (loan_status_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 194,
AVG_ROW_LENGTH = 111,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `loan_status_name` on table `dim_loan_status`
--
ALTER TABLE dim_loan_status 
  ADD UNIQUE INDEX loan_status_name(loan_status_name);

--
-- Create table `dim_letter_status`
--
CREATE TABLE dim_letter_status (
  letter_status_id INT(11) NOT NULL AUTO_INCREMENT,
  letter_status_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (letter_status_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `letter_status_name` on table `dim_letter_status`
--
ALTER TABLE dim_letter_status 
  ADD UNIQUE INDEX letter_status_name(letter_status_name);

--
-- Create table `dim_company`
--
CREATE TABLE dim_company (
  company_id INT(11) NOT NULL AUTO_INCREMENT,
  company_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (company_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `company_name` on table `dim_company`
--
ALTER TABLE dim_company 
  ADD UNIQUE INDEX company_name(company_name);

--
-- Create table `loan`
--
CREATE TABLE loan (
  loan_id INT(11) NOT NULL AUTO_INCREMENT,
  company_id INT(11) NOT NULL,
  borrower_id INT(11) NOT NULL,
  loan_id_ext VARCHAR(30) NOT NULL,
  priority INT(11) DEFAULT NULL,
  box_number VARCHAR(20) DEFAULT NULL,
  contracts_count INT(11) DEFAULT NULL,
  has_contract VARCHAR(3) DEFAULT NULL,
  loan_status_id INT(11) DEFAULT NULL,
  letter_status_id INT(11) DEFAULT NULL,
  letter_date DATE DEFAULT NULL,
  loan_number VARCHAR(50) DEFAULT NULL,
  loan_date DATE DEFAULT NULL,
  loan_amount DECIMAL(12, 2) DEFAULT NULL,
  last_payment_date DATE DEFAULT NULL,
  letter_payoff_date DATE DEFAULT NULL,
  total_debt_wo_pnlt DECIMAL(12, 2) DEFAULT NULL,
  total_debt_wo_pnlt_w VARCHAR(150) DEFAULT NULL,
  total_debt DECIMAL(12, 2) DEFAULT NULL,
  total_debt_w VARCHAR(150) DEFAULT NULL,
  principal_debt DECIMAL(12, 2) DEFAULT NULL,
  principal_debt_w VARCHAR(150) DEFAULT NULL,
  interest_debt DECIMAL(12, 2) DEFAULT NULL,
  interest_debt_w VARCHAR(150) DEFAULT NULL,
  commission_debt DECIMAL(12, 2) DEFAULT NULL,
  commission_debt_w VARCHAR(150) DEFAULT NULL,
  penalty_debt DECIMAL(12, 2) DEFAULT NULL,
  penalty_debt_w VARCHAR(150) DEFAULT NULL,
  inscription_cost DECIMAL(12, 2) DEFAULT NULL,
  inscription_cost_w VARCHAR(150) DEFAULT NULL,
  total_debt_w_inscr DECIMAL(12, 2) DEFAULT NULL,
  total_debt_w_inscr_w VARCHAR(150) DEFAULT NULL,
  initial_creditor VARCHAR(100) DEFAULT NULL,
  initial_concession VARCHAR(150) DEFAULT NULL,
  next_consession_aval VARCHAR(150) DEFAULT NULL,
  fc_to_ams_concession VARCHAR(150) DEFAULT NULL,
  previous_creditor VARCHAR(100) DEFAULT NULL,
  current_creditor VARCHAR(100) DEFAULT NULL,
  current_concession_number VARCHAR(30) DEFAULT NULL,
  current_concession_date DATE DEFAULT NULL,
  inscription_number VARCHAR(20) DEFAULT NULL,
  inscription_date DATE DEFAULT NULL,
  notary_name VARCHAR(100) DEFAULT NULL,
  loan_transfer_date DATE DEFAULT NULL,
  prepayment_order_date DATE DEFAULT NULL,
  prepayment_confirmation_date DATE DEFAULT NULL,
  region VARCHAR(30) DEFAULT NULL,
  private_executor_name VARCHAR(100) DEFAULT NULL,
  loan_status2_id INT(11) DEFAULT NULL,
  documents_transfer_date DATE DEFAULT NULL,
  days_for_execution_opening INT(11) DEFAULT NULL,
  days_for_salary_deduction_transfer INT(11) DEFAULT NULL,
  execution_opening_date DATE DEFAULT NULL,
  execution_number VARCHAR(20) DEFAULT NULL,
  access_id VARCHAR(20) DEFAULT NULL,
  transferred_to_executor_status VARCHAR(20) DEFAULT NULL,
  execution_opening_status VARCHAR(20) DEFAULT NULL,
  sal_deduction_transferred_status VARCHAR(20) DEFAULT NULL,
  income_found_status VARCHAR(20) DEFAULT NULL,
  income_not_found_status VARCHAR(20) DEFAULT NULL,
  sal_deduction_document_date DATE DEFAULT NULL,
  general_income_info VARCHAR(20) DEFAULT NULL,
  sal_deduction_fail_reason VARCHAR(20) DEFAULT NULL,
  income_check_second_request_date DATE DEFAULT NULL,
  income_check_second_request_result VARCHAR(20) DEFAULT NULL,
  execution_has_payments VARCHAR(30) DEFAULT NULL,
  prepayment_return_control VARCHAR(20) DEFAULT NULL,
  discount_closure VARCHAR(10) DEFAULT NULL,
  registry_number INT(11) DEFAULT NULL,
  check_needed BIT(1) DEFAULT NULL,
  additional_checks_status VARCHAR(50) DEFAULT NULL,
  additional_checks_number INT(11) DEFAULT NULL,
  has_payments BIT(1) DEFAULT NULL,
  loan_comment VARCHAR(250) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (loan_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 108688,
AVG_ROW_LENGTH = 1235,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `ix_loan_id_ext` on table `loan`
--
ALTER TABLE loan 
  ADD INDEX ix_loan_id_ext(loan_id_ext);

--
-- Create index `ix_com_bor_upl_idext` on table `loan`
--
ALTER TABLE loan 
  ADD INDEX ix_com_bor_upl_idext(loan_id_ext, company_id, borrower_id, upload_id);

--
-- Create foreign key
--
ALTER TABLE loan 
  ADD CONSTRAINT loan_ibfk_1 FOREIGN KEY (company_id)
    REFERENCES dim_company(company_id);

--
-- Create foreign key
--
ALTER TABLE loan 
  ADD CONSTRAINT loan_ibfk_2 FOREIGN KEY (borrower_id)
    REFERENCES borrower(borrower_id);

--
-- Create foreign key
--
ALTER TABLE loan 
  ADD CONSTRAINT loan_ibfk_3 FOREIGN KEY (loan_status_id)
    REFERENCES dim_loan_status(loan_status_id);

--
-- Create foreign key
--
ALTER TABLE loan 
  ADD CONSTRAINT loan_ibfk_4 FOREIGN KEY (letter_status_id)
    REFERENCES dim_letter_status(letter_status_id);

--
-- Create foreign key
--
ALTER TABLE loan 
  ADD CONSTRAINT loan_ibfk_5 FOREIGN KEY (loan_status2_id)
    REFERENCES dim_loan_status(loan_status_id);

--
-- Create foreign key
--
ALTER TABLE loan 
  ADD CONSTRAINT loan_ibfk_6 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE loan 
  ADD CONSTRAINT loan_ibfk_7 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

--
-- Create view `v_search_results`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_search_results
AS
SELECT
  `dc`.`company_name` AS `company_name`,
  `l`.`loan_id` AS `loan_id`,
  `l`.`loan_number` AS `loan_number`,
  `b`.`ssn` AS `ssn`,
  `b`.`full_name` AS `full_name`
FROM ((`loan` `l`
  JOIN `borrower` `b`
    ON (`l`.`borrower_id` = `b`.`borrower_id`))
  JOIN `dim_company` `dc`
    ON (`l`.`company_id` = `dc`.`company_id`));

--
-- Create view `v_loan_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_loan_info
AS
SELECT
  `l`.`loan_id` AS `loan_id`,
  `l`.`loan_number` AS `loan_number`,
  `l`.`loan_id_ext` AS `loan_id_ext`,
  `dc`.`company_name` AS `company_name`,
  `dlst`.`loan_status_name` AS `loan_status_name`,
  `dls`.`letter_status_name` AS `letter_status_name`,
  `l`.`loan_date` AS `loan_date`,
  `l`.`loan_amount` AS `loan_amount`,
  `l`.`priority` AS `priority`,
  `l`.`box_number` AS `box_number`,
  `l`.`letter_date` AS `letter_date`,
  `l`.`contracts_count` AS `contracts_count`,
  `l`.`has_contract` AS `has_contract`,
  `l`.`last_payment_date` AS `last_payment_date`,
  `l`.`letter_payoff_date` AS `letter_payoff_date`,
  `l`.`total_debt_wo_pnlt` AS `total_debt_wo_pnlt`,
  `l`.`total_debt_wo_pnlt_w` AS `total_debt_wo_pnlt_w`,
  `l`.`total_debt` AS `total_debt`,
  `l`.`total_debt_w` AS `total_debt_w`,
  `l`.`principal_debt` AS `principal_debt`,
  `l`.`principal_debt_w` AS `principal_debt_w`,
  `l`.`interest_debt` AS `interest_debt`,
  `l`.`interest_debt_w` AS `interest_debt_w`,
  `l`.`commission_debt` AS `commission_debt`,
  `l`.`commission_debt_w` AS `commission_debt_w`,
  `l`.`penalty_debt` AS `penalty_debt`,
  `l`.`penalty_debt_w` AS `penalty_debt_w`,
  `l`.`inscription_cost` AS `inscription_cost`,
  `l`.`inscription_cost_w` AS `inscription_cost_w`,
  `l`.`total_debt_w_inscr` AS `total_debt_w_inscr`,
  `l`.`total_debt_w_inscr_w` AS `total_debt_w_inscr_w`,
  `l`.`initial_creditor` AS `initial_creditor`,
  `l`.`initial_concession` AS `initial_concession`,
  `l`.`next_consession_aval` AS `next_consession_aval`,
  `l`.`fc_to_ams_concession` AS `fc_to_ams_concession`,
  `l`.`previous_creditor` AS `previous_creditor`,
  `l`.`current_creditor` AS `current_creditor`,
  `l`.`current_concession_number` AS `current_concession_number`,
  `l`.`current_concession_date` AS `current_concession_date`
FROM (((`loan` `l`
  JOIN `dim_company` `dc`
    ON (`l`.`company_id` = `dc`.`company_id`))
  LEFT JOIN `dim_loan_status` `dlst`
    ON (`l`.`loan_status_id` = `dlst`.`loan_status_id`))
  LEFT JOIN `dim_letter_status` `dls`
    ON (`l`.`letter_status_id` = `dls`.`letter_status_id`));

--
-- Create view `v_borrowers_loans_links`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_borrowers_loans_links
AS
SELECT
  `l`.`loan_id` AS `loan_id`,
  `l1`.`loan_id` AS `other_loan_id`,
  `l1`.`loan_number` AS `other_loan_number`,
  `l1`.`loan_date` AS `other_loan_date`,
  `dc`.`company_name` AS `other_company_name`
FROM ((`loan` `l`
  JOIN `loan` `l1`
    ON (`l`.`borrower_id` = `l1`.`borrower_id`))
  JOIN `dim_company` `dc`
    ON (`l1`.`company_id` = `dc`.`company_id`))
WHERE `l`.`loan_id` <> `l1`.`loan_id`;

--
-- Create table `trial`
--
CREATE TABLE trial (
  trial_id INT(11) NOT NULL AUTO_INCREMENT,
  loan_id INT(11) NOT NULL,
  borrower_full_name_ext VARCHAR(100) DEFAULT NULL,
  borrower_ssn_ext VARCHAR(20) DEFAULT NULL,
  loan_number_ext VARCHAR(50) NOT NULL,
  total_debt DECIMAL(12, 2) DEFAULT NULL,
  initial_creditor VARCHAR(100) DEFAULT NULL,
  contact_phone_number VARCHAR(100) DEFAULT NULL,
  trial_number VARCHAR(20) DEFAULT NULL,
  execution_number VARCHAR(50) DEFAULT NULL,
  court_name VARCHAR(100) DEFAULT NULL,
  claim_date DATE DEFAULT NULL,
  trial_stage VARCHAR(100) DEFAULT NULL,
  court_decision_promulgation_date DATE DEFAULT NULL,
  comments VARCHAR(500) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (trial_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7533,
AVG_ROW_LENGTH = 412,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE trial 
  ADD CONSTRAINT trial_ibfk_1 FOREIGN KEY (loan_id)
    REFERENCES loan(loan_id);

--
-- Create foreign key
--
ALTER TABLE trial 
  ADD CONSTRAINT trial_ibfk_2 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE trial 
  ADD CONSTRAINT trial_ibfk_3 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

--
-- Create view `v_trial_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_trial_info
AS
SELECT
  `t`.`loan_id` AS `loan_id`,
  `t`.`loan_number_ext` AS `loan_number_ext`,
  `t`.`total_debt` AS `total_debt`,
  `t`.`initial_creditor` AS `initial_creditor`,
  `t`.`contact_phone_number` AS `contact_phone_number`,
  `t`.`trial_number` AS `trial_number`,
  `t`.`execution_number` AS `execution_number`,
  `t`.`court_name` AS `court_name`,
  `t`.`claim_date` AS `claim_date`,
  `t`.`trial_stage` AS `trial_stage`,
  `t`.`court_decision_promulgation_date` AS `court_decision_promulgation_date`,
  `t`.`comments` AS `comments`
FROM `trial` `t`;

--
-- Create table `predicted_next_payment`
--
CREATE TABLE predicted_next_payment (
  loan_id INT(11) NOT NULL,
  days_to_next_payment INT(11) DEFAULT NULL,
  predicted_pmt_amount DECIMAL(12, 2) DEFAULT NULL,
  PRIMARY KEY (loan_id)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 71,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE predicted_next_payment 
  ADD CONSTRAINT predicted_next_payment_loan_id FOREIGN KEY (loan_id)
    REFERENCES loan(loan_id);

--
-- Create table `loan_expenses`
--
CREATE TABLE loan_expenses (
  loan_expenses_id INT(11) NOT NULL AUTO_INCREMENT,
  loan_id INT(11) NOT NULL,
  debit_iban VARCHAR(30) DEFAULT NULL,
  credit_iban VARCHAR(30) DEFAULT NULL,
  bank_code CHAR(6) DEFAULT NULL,
  contragent_name VARCHAR(50) DEFAULT NULL,
  contragent_code VARCHAR(20) NOT NULL,
  payment_details VARCHAR(250) DEFAULT NULL,
  payment_date DATE NOT NULL,
  document_no VARCHAR(20) NOT NULL,
  payment_amount DECIMAL(12, 2) NOT NULL,
  payment_type VARCHAR(150) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (loan_expenses_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 60523,
AVG_ROW_LENGTH = 540,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE loan_expenses 
  ADD CONSTRAINT loan_expenses_ibfk_1 FOREIGN KEY (loan_id)
    REFERENCES loan(loan_id);

--
-- Create foreign key
--
ALTER TABLE loan_expenses 
  ADD CONSTRAINT loan_expenses_ibfk_2 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE loan_expenses 
  ADD CONSTRAINT loan_expenses_ibfk_3 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

--
-- Create view `v_loan_expenses_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_loan_expenses_info
AS
SELECT
  `le`.`loan_id` AS `loan_id`,
  `le`.`payment_date` AS `payment_date`,
  `le`.`payment_amount` AS `payment_amount`,
  `le`.`credit_iban` AS `credit_iban`,
  `le`.`debit_iban` AS `debit_iban`,
  `le`.`bank_code` AS `bank_code`,
  `le`.`contragent_name` AS `contragent_name`,
  `le`.`contragent_code` AS `contragent_code`,
  `le`.`payment_details` AS `payment_details`,
  `le`.`document_no` AS `document_no`,
  `le`.`payment_type` AS `payment_type`
FROM `loan_expenses` `le`;

--
-- Create table `loan_contragent_info`
--
CREATE TABLE loan_contragent_info (
  loan_contragent_info_id INT(11) NOT NULL AUTO_INCREMENT,
  loan_id INT(11) NOT NULL,
  borrower_ssn VARCHAR(20) DEFAULT NULL,
  borrower_full_name VARCHAR(100) DEFAULT NULL,
  birth_date DATE DEFAULT NULL,
  registration_address VARCHAR(250) DEFAULT NULL,
  total_debt DECIMAL(12, 2) DEFAULT NULL,
  prepayment_amount DECIMAL(12, 2) DEFAULT NULL,
  prepayment_return_amount DECIMAL(12, 2) DEFAULT NULL,
  total_payments_amount DECIMAL(12, 2) DEFAULT NULL,
  inscription_number VARCHAR(20) DEFAULT NULL,
  inscription_date DATE DEFAULT NULL,
  notary_name VARCHAR(100) DEFAULT NULL,
  loan_transfer_date DATE DEFAULT NULL,
  prepayment_order_date DATE DEFAULT NULL,
  prepayment_confirmation_date DATE DEFAULT NULL,
  region VARCHAR(30) DEFAULT NULL,
  private_executor_name VARCHAR(100) DEFAULT NULL,
  loan_status2_id INT(11) DEFAULT NULL,
  documents_transfer_date DATE DEFAULT NULL,
  days_for_execution_opening INT(11) DEFAULT NULL,
  days_for_salary_deduction_transfer INT(11) DEFAULT NULL,
  execution_opening_date DATE DEFAULT NULL,
  execution_number VARCHAR(20) DEFAULT NULL,
  access_id VARCHAR(20) DEFAULT NULL,
  transferred_to_executor_status VARCHAR(50) DEFAULT NULL,
  execution_opening_status VARCHAR(50) DEFAULT NULL,
  sal_deduction_transferred_status VARCHAR(50) DEFAULT NULL,
  income_found_status VARCHAR(50) DEFAULT NULL,
  income_not_found_status VARCHAR(50) DEFAULT NULL,
  information_not_available_status VARCHAR(50) DEFAULT NULL,
  sal_deduction_document_date DATE DEFAULT NULL,
  general_income_info VARCHAR(50) DEFAULT NULL,
  sal_deduction_fail_reason VARCHAR(100) DEFAULT NULL,
  income_check_second_request_date DATE DEFAULT NULL,
  income_check_second_request_result VARCHAR(512) DEFAULT NULL,
  execution_has_payments VARCHAR(30) DEFAULT NULL,
  prepayment_return_control VARCHAR(20) DEFAULT NULL,
  discount_closure VARCHAR(50) DEFAULT NULL,
  registry_number INT(11) DEFAULT NULL,
  check_needed BIT(1) DEFAULT NULL,
  additional_checks_status VARCHAR(50) DEFAULT NULL,
  additional_checks_number INT(11) DEFAULT NULL,
  has_payments BIT(1) DEFAULT NULL,
  loan_comment VARCHAR(250) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (loan_contragent_info_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 88533,
AVG_ROW_LENGTH = 710,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `loan_id` on table `loan_contragent_info`
--
ALTER TABLE loan_contragent_info 
  ADD UNIQUE INDEX loan_id(loan_id);

--
-- Create foreign key
--
ALTER TABLE loan_contragent_info 
  ADD CONSTRAINT loan_contragent_info_ibfk_1 FOREIGN KEY (loan_id)
    REFERENCES loan(loan_id);

--
-- Create foreign key
--
ALTER TABLE loan_contragent_info 
  ADD CONSTRAINT loan_contragent_info_ibfk_2 FOREIGN KEY (loan_status2_id)
    REFERENCES dim_loan_status(loan_status_id);

--
-- Create foreign key
--
ALTER TABLE loan_contragent_info 
  ADD CONSTRAINT loan_contragent_info_ibfk_3 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE loan_contragent_info 
  ADD CONSTRAINT loan_contragent_info_ibfk_4 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

--
-- Create view `v_r_main_report_list`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_main_report_list
AS
SELECT
  `dc`.`company_name` AS `company_name`,
  `l`.`loan_id` AS `loan_id`,
  `lci`.`total_debt` AS `total_debt`,
  CASE WHEN `lci`.`inscription_number` IS NOT NULL THEN 1 ELSE 0 END AS `inscription_made`,
  `lci`.`inscription_number` AS `inscription_number`,
  `lci`.`inscription_date` AS `inscription_date`,
  `lci`.`inscription_date` - INTERVAL DAYOFMONTH(`lci`.`inscription_date`) - 1 DAY AS `inscription_month`,
  `lci`.`total_debt` AS `inscription_amount`,
  CASE WHEN `lci`.`execution_opening_date` IS NOT NULL THEN 1 ELSE 0 END AS `execution_opened`,
  `lci`.`execution_opening_date` AS `execution_opening_date`,
  `lci`.`execution_opening_date` - INTERVAL DAYOFMONTH(`lci`.`execution_opening_date`) - 1 DAY AS `execution_month`,
  `lci`.`total_debt` AS `execution_amount`,
  CASE WHEN `lci`.`sal_deduction_document_date` IS NOT NULL THEN 1 ELSE 0 END AS `sal_deduction_made`,
  `lci`.`sal_deduction_transferred_status` AS `sal_deduction_transferred_status`,
  `lci`.`sal_deduction_document_date` AS `sal_deduction_document_date`,
  `lci`.`sal_deduction_document_date` - INTERVAL DAYOFMONTH(`lci`.`sal_deduction_document_date`) - 1 DAY AS `sal_deduction_month`,
  `lci`.`private_executor_name` AS `private_executor_name`
FROM ((`loan` `l`
  JOIN `dim_company` `dc`
    ON (`l`.`company_id` = `dc`.`company_id`))
  JOIN `loan_contragent_info` `lci`
    ON (`l`.`loan_id` = `lci`.`loan_id`));

--
-- Create view `v_loan_contragent_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_loan_contragent_info
AS
SELECT
  `lci`.`loan_id` AS `loan_id`,
  `lci`.`borrower_ssn` AS `borrower_ssn`,
  `lci`.`borrower_full_name` AS `borrower_full_name`,
  `lci`.`birth_date` AS `birth_date`,
  `lci`.`registration_address` AS `registration_address`,
  `lci`.`total_debt` AS `total_debt`,
  `lci`.`prepayment_amount` AS `prepayment_amount`,
  `lci`.`prepayment_return_amount` AS `prepayment_return_amount`,
  `lci`.`total_payments_amount` AS `total_payments_amount`,
  `lci`.`inscription_number` AS `inscription_number`,
  `lci`.`inscription_date` AS `inscription_date`,
  `lci`.`notary_name` AS `notary_name`,
  `lci`.`registry_number` AS `registry_number`,
  `lci`.`loan_transfer_date` AS `loan_transfer_date`,
  `lci`.`prepayment_order_date` AS `prepayment_order_date`,
  `lci`.`prepayment_confirmation_date` AS `prepayment_confirmation_date`,
  `lci`.`region` AS `region`,
  `lci`.`private_executor_name` AS `private_executor_name`,
  `dls`.`loan_status_name` AS `loan_status_name`,
  `lci`.`documents_transfer_date` AS `documents_transfer_date`,
  `lci`.`days_for_execution_opening` AS `days_for_execution_opening`,
  `lci`.`days_for_salary_deduction_transfer` AS `days_for_salary_deduction_transfer`,
  `lci`.`execution_opening_date` AS `execution_opening_date`,
  `lci`.`execution_number` AS `execution_number`,
  `lci`.`access_id` AS `access_id`,
  `lci`.`transferred_to_executor_status` AS `transferred_to_executor_status`,
  `lci`.`execution_opening_status` AS `execution_opening_status`,
  `lci`.`sal_deduction_transferred_status` AS `sal_deduction_transferred_status`,
  `lci`.`income_found_status` AS `income_found_status`,
  `lci`.`income_not_found_status` AS `income_not_found_status`,
  `lci`.`information_not_available_status` AS `information_not_available_status`,
  `lci`.`sal_deduction_document_date` AS `sal_deduction_document_date`,
  `lci`.`general_income_info` AS `general_income_info`,
  `lci`.`sal_deduction_fail_reason` AS `sal_deduction_fail_reason`,
  CASE WHEN `lci`.`check_needed` = 1 THEN 'Да' ELSE 'Нет' END AS `check_needed`,
  `lci`.`income_check_second_request_date` AS `income_check_second_request_date`,
  `lci`.`income_check_second_request_result` AS `income_check_second_request_result`,
  `lci`.`additional_checks_status` AS `additional_checks_status`,
  `lci`.`additional_checks_number` AS `additional_checks_number`,
  `lci`.`execution_has_payments` AS `execution_has_payments`,
  `lci`.`prepayment_return_control` AS `prepayment_return_control`,
  `lci`.`discount_closure` AS `discount_closure`,
  CASE WHEN `lci`.`has_payments` = 1 THEN 'Да' ELSE 'Нет' END AS `has_payments`,
  `lci`.`loan_comment` AS `loan_comment`
FROM (`loan_contragent_info` `lci`
  LEFT JOIN `dim_loan_status` `dls`
    ON (`lci`.`loan_status2_id` = `dls`.`loan_status_id`));

--
-- Create table `loan_calculated_debt`
--
CREATE TABLE loan_calculated_debt (
  loan_id INT(11) NOT NULL,
  valid_from DATE NOT NULL,
  valid_to DATE NOT NULL,
  principal_debt DECIMAL(12, 2) NOT NULL DEFAULT 0.00,
  interest_debt DECIMAL(12, 2) NOT NULL DEFAULT 0.00,
  commission_debt DECIMAL(12, 2) NOT NULL DEFAULT 0.00,
  penalty_debt DECIMAL(12, 2) NOT NULL DEFAULT 0.00,
  is_payment_received BIT(1) NOT NULL DEFAULT b'0',
  is_paid_status BIT(1) NOT NULL DEFAULT b'0',
  calculated_at DATETIME NOT NULL,
  PRIMARY KEY (loan_id, valid_from)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 148,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE loan_calculated_debt 
  ADD CONSTRAINT loan_calculated_debt_ibfk_1 FOREIGN KEY (loan_id)
    REFERENCES loan(loan_id);

--
-- Create table `dim_match_type`
--
CREATE TABLE dim_match_type (
  match_type_id INT(11) NOT NULL AUTO_INCREMENT,
  match_type_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (match_type_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2340,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `match_type_name` on table `dim_match_type`
--
ALTER TABLE dim_match_type 
  ADD UNIQUE INDEX match_type_name(match_type_name);

--
-- Create table `dim_payment_type`
--
CREATE TABLE dim_payment_type (
  payment_type_id INT(11) NOT NULL AUTO_INCREMENT,
  payment_type_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (payment_type_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `payment_type_name` on table `dim_payment_type`
--
ALTER TABLE dim_payment_type 
  ADD UNIQUE INDEX payment_type_name(payment_type_name);

--
-- Create table `payment`
--
CREATE TABLE payment (
  payment_id INT(11) NOT NULL AUTO_INCREMENT,
  company_id INT(11) NOT NULL,
  loan_id INT(11) DEFAULT NULL,
  payment_date DATE NOT NULL,
  payment_amount DECIMAL(12, 2) NOT NULL,
  contragent_name VARCHAR(50) DEFAULT NULL,
  payment_details VARCHAR(250) DEFAULT NULL,
  document_no VARCHAR(20) NOT NULL,
  debit_iban VARCHAR(30) DEFAULT NULL,
  credit_iban VARCHAR(30) DEFAULT NULL,
  bank_code CHAR(6) DEFAULT NULL,
  contragent_code VARCHAR(20) NOT NULL,
  borrower_ssn_ext VARCHAR(20) DEFAULT NULL,
  loan_number_ext VARCHAR(50) DEFAULT NULL,
  execution_number VARCHAR(20) DEFAULT NULL,
  loan_id_ext VARCHAR(30) DEFAULT NULL,
  borrower_full_name_ext VARCHAR(100) DEFAULT NULL,
  inscription_number VARCHAR(20) DEFAULT NULL,
  payment_source VARCHAR(50) DEFAULT NULL,
  payment_type_id INT(11) NOT NULL,
  match_type_id INT(11) NOT NULL,
  private_executor_found BIT(1) NOT NULL,
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (payment_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 457423,
AVG_ROW_LENGTH = 496,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `loan_id_payment_date` on table `payment`
--
ALTER TABLE payment 
  ADD INDEX loan_id_payment_date(loan_id, payment_date);

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT payment_ibfk_1 FOREIGN KEY (company_id)
    REFERENCES dim_company(company_id);

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT payment_ibfk_2 FOREIGN KEY (loan_id)
    REFERENCES loan(loan_id);

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT payment_ibfk_3 FOREIGN KEY (payment_type_id)
    REFERENCES dim_payment_type(payment_type_id);

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT payment_ibfk_4 FOREIGN KEY (match_type_id)
    REFERENCES dim_match_type(match_type_id);

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT payment_ibfk_5 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE payment 
  ADD CONSTRAINT payment_ibfk_6 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

DELIMITER $$

--
-- Create procedure `process_payments`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE process_payments()
BEGIN

  
  DROP TEMPORARY TABLE IF EXISTS tmp_lcd;
  CREATE TEMPORARY TABLE tmp_lcd AS (SELECT
    lcd.loan_id,
    MAX(lcd.calculated_at) AS last_calculated_at
  FROM loan_calculated_debt lcd
  GROUP BY lcd.loan_id);
  CREATE INDEX ix_loan_id ON tmp_lcd (loan_id);

  DROP TEMPORARY TABLE IF EXISTS tmp_pay_events;
  CREATE TEMPORARY TABLE tmp_pay_events AS
SELECT
  p.loan_id,
  p.payment_amount,
  p.payment_date AS event_date,
  1 AS is_payment_received,
  0 AS is_paid_status
FROM payment p
  JOIN loan l
    ON p.loan_id = l.loan_id
  LEFT JOIN tmp_lcd
    ON l.loan_id = tmp_lcd.loan_id
WHERE EXISTS (SELECT
    1
  FROM payment p1
  WHERE p1.loan_id = l.loan_id
  AND p1.row_start > tmp_lcd.last_calculated_at)
OR tmp_lcd.loan_id IS NULL

UNION ALL

SELECT
  l.loan_id,
  0,
  CAST(l.row_start AS date),
  0,
  1
FROM loan l
  JOIN dim_loan_status dls
    ON l.loan_status_id = dls.loan_status_id
    AND dls.loan_status_name IN ('погашен', 'погашен по акции')
  LEFT JOIN tmp_lcd
    ON l.loan_id = tmp_lcd.loan_id
WHERE tmp_lcd.last_calculated_at < l.row_start
OR tmp_lcd.loan_id IS NULL;


DELETE lcd
  FROM loan_calculated_debt lcd
    JOIN tmp_pay_events tpe
      ON lcd.loan_id = tpe.loan_id;

INSERT INTO loan_calculated_debt (loan_id, valid_from, valid_to, principal_debt, interest_debt, commission_debt, penalty_debt, calculated_at)
  SELECT
    l.loan_id,
    l.current_concession_date,
    '2099-12-31',
    l.principal_debt,
    l.interest_debt,
    l.commission_debt,
    l.penalty_debt,
    l.current_concession_date
  FROM loan l
    LEFT JOIN loan_calculated_debt lcd
      ON l.loan_id = lcd.loan_id
  WHERE lcd.loan_id IS NULL;

  
  BEGIN

    DECLARE _done INT DEFAULT FALSE;
    DECLARE _loan_id int;
    DECLARE _payment_amount decimal(12,2);
    DECLARE _event_date date;
    DECLARE _is_payment_received int;
    DECLARE _is_paid_status int;

    DECLARE _amount_to_distribute decimal (12,2);
    DECLARE _principal_debt decimal (12,2);
    DECLARE _interest_debt decimal (12,2);
    DECLARE _commission_debt decimal (12,2);
    DECLARE _penalty_debt decimal (12,2);

    DECLARE _calculated_at datetime;
    
    DECLARE cur CURSOR FOR
SELECT
  tpe.loan_id,
  tpe.payment_amount,
  tpe.event_date,
  tpe.is_payment_received,
  tpe.is_paid_status
FROM tmp_pay_events tpe
ORDER BY tpe.loan_id, tpe.event_date, (CASE WHEN tpe.is_paid_status = 1 THEN 1 ELSE 2 END);

DECLARE CONTINUE HANDLER FOR NOT FOUND SET _done = TRUE;

    OPEN cur;
      read_loop: LOOP
      FETCH cur INTO _loan_id, _payment_amount, _event_date, _is_payment_received, _is_paid_status;
      IF _done 
        THEN LEAVE read_loop;
      END IF;


SELECT
  lcd.principal_debt,
  lcd.interest_debt,
  lcd.commission_debt,
  lcd.penalty_debt INTO _principal_debt, _interest_debt, _commission_debt, _penalty_debt
FROM loan_calculated_debt lcd
WHERE lcd.loan_id = _loan_id
AND lcd.valid_to = '2099-12-31';
  
      
      IF _is_paid_status = 1 THEN
        SET _principal_debt = 0, _interest_debt = 0, _commission_debt = 0, _penalty_debt = 0;
      
      ELSE
        SET _amount_to_distribute = LEAST(_principal_debt, _payment_amount);
        SET _principal_debt = _principal_debt - _amount_to_distribute;
        SET _payment_amount = _payment_amount - _amount_to_distribute;

        SET _amount_to_distribute = LEAST(_interest_debt, _payment_amount);
        SET _interest_debt = _interest_debt - _amount_to_distribute;
        SET _payment_amount = _payment_amount - _amount_to_distribute;

        SET _amount_to_distribute = LEAST(_commission_debt, _payment_amount);
        SET _commission_debt = _commission_debt - _amount_to_distribute;
        SET _payment_amount = _payment_amount - _amount_to_distribute;

        SET _amount_to_distribute = LEAST(_penalty_debt, _payment_amount);
        SET _penalty_debt = _penalty_debt - _amount_to_distribute;
        SET _payment_amount = _payment_amount - _amount_to_distribute;
      END IF;


DELETE lcd
  FROM loan_calculated_debt lcd
WHERE lcd.loan_id = _loan_id
  AND lcd.valid_to = '2099-12-31'
  AND _event_date < lcd.valid_from;

      SET _calculated_at = NOW();

UPDATE loan_calculated_debt lcd
SET lcd.valid_to = _event_date,
    lcd.calculated_at = _calculated_at
WHERE lcd.loan_id = _loan_id
AND lcd.valid_to = '2099-12-31'
AND _event_date >= lcd.valid_from;


INSERT INTO loan_calculated_debt (loan_id, valid_from, valid_to, principal_debt, interest_debt, commission_debt, penalty_debt, is_payment_received, is_paid_status, calculated_at)
  SELECT
    _loan_id,
    DATE_ADD(_event_date, INTERVAL 1 DAY),
    '2099-12-31',
    _principal_debt,
    _interest_debt,
    _commission_debt,
    _penalty_debt,
    _is_payment_received,
    _is_paid_status,
    _calculated_at;

END LOOP;
    CLOSE cur;

  END;

END
$$

DELIMITER ;

--
-- Create view `v_r_prepayment_return_list`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_prepayment_return_list
AS
SELECT
  `dc`.`company_name` AS `company_name`,
  `p`.`loan_id` AS `loan_id`,
  `p`.`payment_id` AS `payment_id`,
  `p`.`payment_date` AS `payment_date`,
  `p`.`payment_date` - INTERVAL DAYOFMONTH(`p`.`payment_date`) - 1 DAY AS `pay_month`,
  DAYOFMONTH(`p`.`payment_date`) AS `pay_day`,
  `p`.`payment_amount` AS `payment_amount`
FROM ((`payment` `p`
  JOIN `dim_company` `dc`
    ON (`p`.`company_id` = `dc`.`company_id`))
  JOIN `dim_payment_type` `dpt`
    ON (`p`.`payment_type_id` = `dpt`.`payment_type_id`
    AND `dpt`.`payment_type_name` IN ('Возврат ававнса', 'Возврат аванса', 'Возврат авасна')))
WHERE `p`.`payment_amount` > 0;

--
-- Create view `v_r_payments_list`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_payments_list
AS
SELECT
  `dc`.`company_name` AS `company_name`,
  `p`.`loan_id` AS `loan_id`,
  `p`.`payment_id` AS `payment_id`,
  `p`.`payment_date` AS `payment_date`,
  `p`.`payment_date` - INTERVAL DAYOFMONTH(`p`.`payment_date`) - 1 DAY AS `pay_month`,
  DAYOFMONTH(`p`.`payment_date`) AS `pay_day`,
  `p`.`payment_amount` AS `payment_amount`
FROM ((`payment` `p`
  JOIN `dim_company` `dc`
    ON (`p`.`company_id` = `dc`.`company_id`))
  JOIN `dim_payment_type` `dpt`
    ON (`p`.`payment_type_id` = `dpt`.`payment_type_id`
    AND `dpt`.`payment_type_name` = 'Погашение'))
WHERE `p`.`payment_amount` > 0;

DELIMITER $$

--
-- Create procedure `r_short_report`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
PROCEDURE r_short_report(IN _start_date date, _end_date date)
BEGIN


SELECT
  `vrmrl`.`company_name` AS `company_name`,
  'inscription_made' AS `measure`,
  `vrmrl`.`inscription_month` AS `report_month`,
  SUM(`vrmrl`.`inscription_made`) AS `report_count`,
  SUM(`vrmrl`.`inscription_amount`) AS `report_amount`,
  SUM(`vrmrl`.`inscription_made`) AS `report_to_display`
FROM `v_r_main_report_list` `vrmrl`
WHERE `vrmrl`.`inscription_month` IS NOT NULL
AND vrmrl.inscription_date BETWEEN _start_date AND _end_date
GROUP BY `vrmrl`.`company_name`,
         `vrmrl`.`inscription_month`
UNION ALL
SELECT
  `vrmrl`.`company_name` AS `company_name`,
  'execution_opened' AS `measure`,
  `vrmrl`.`execution_month` AS `report_month`,
  SUM(`vrmrl`.`execution_opened`) AS `report_count`,
  SUM(`vrmrl`.`execution_amount`) AS `report_amount`,
  SUM(`vrmrl`.`execution_opened`) AS `report_to_display`
FROM `v_r_main_report_list` `vrmrl`
WHERE `vrmrl`.`execution_month` IS NOT NULL
AND vrmrl.execution_opening_date BETWEEN _start_date AND _end_date
GROUP BY `vrmrl`.`company_name`,
         `vrmrl`.`execution_month`
UNION ALL
SELECT
  `vrmrl`.`company_name` AS `company_name`,
  'sal_deduction_made' AS `measure`,
  `vrmrl`.`sal_deduction_month` AS `report_month`,
  SUM(`vrmrl`.`sal_deduction_made`) AS `report_count`,
  NULL AS `report_amount`,
  SUM(`vrmrl`.`sal_deduction_made`) AS `report_to_display`
FROM `v_r_main_report_list` `vrmrl`
WHERE `vrmrl`.`sal_deduction_month` IS NOT NULL
AND vrmrl.sal_deduction_document_date BETWEEN _start_date AND _end_date
GROUP BY `vrmrl`.`company_name`,
         `vrmrl`.`sal_deduction_month`
UNION ALL
SELECT
  vrpl.company_name,
  'payments' AS measure,
  vrpl.pay_month AS report_month,
  COUNT(DISTINCT vrpl.loan_id) AS `report_count`,
  SUM(vrpl.payment_amount) AS `report_amount`,
  SUM(vrpl.payment_amount) AS `report_to_display`
FROM v_r_payments_list vrpl
WHERE vrpl.payment_date BETWEEN _start_date AND _end_date
GROUP BY vrpl.company_name,
         vrpl.pay_month
UNION ALL
SELECT
  vrpl.company_name,
  'prepayment_return' AS measure,
  vrpl.pay_month AS report_month,
  COUNT(DISTINCT vrpl.loan_id) AS `report_count`,
  SUM(vrpl.payment_amount) AS `report_amount`,
  SUM(vrpl.payment_amount) AS `report_to_display`
FROM v_r_prepayment_return_list vrpl
WHERE vrpl.payment_date BETWEEN _start_date AND _end_date
GROUP BY vrpl.company_name,
         vrpl.pay_month;

END
$$

DELIMITER ;

--
-- Create view `v_r_vintage_list`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_vintage_list
AS
WITH t1
AS
(SELECT
      `dc`.`company_name` AS `company_name`,
      `lci`.`loan_id` AS `loan_id`,
      `lci`.`total_debt` AS `total_debt`,
      `lci`.`execution_opening_date` - INTERVAL DAYOFMONTH(`lci`.`execution_opening_date`) - 1 DAY AS `execution_opening_month`,
      `p`.`pay_month` AS `pay_month`,
      IFNULL(SUM(`p`.`payment_amount`), 0) AS `payment_amount`,
      COUNT(`p`.`payment_id`) AS `payment_cnt`,
      CASE WHEN COUNT(`p`.`payment_id`) > 0 THEN 1 ELSE 0 END AS `has_payments`
    FROM (((`eattorney_crm`.`loan_contragent_info` `lci`
      JOIN `eattorney_crm`.`loan` `l`
        ON (`lci`.`loan_id` = `l`.`loan_id`))
      JOIN `eattorney_crm`.`dim_company` `dc`
        ON (`l`.`company_id` = `dc`.`company_id`))
      LEFT JOIN `eattorney_crm`.`v_r_payments_list` `p`
        ON (`l`.`loan_id` = `p`.`loan_id`))
    WHERE `lci`.`execution_opening_date` IS NOT NULL
    GROUP BY `dc`.`company_name`,
             `lci`.`loan_id`,
             `lci`.`execution_opening_date` - INTERVAL DAYOFMONTH(`lci`.`execution_opening_date`) - 1 DAY,
             `lci`.`total_debt`,
             `p`.`pay_month`)
SELECT
  `t1`.`company_name` AS `company_name`,
  `t1`.`loan_id` AS `loan_id`,
  `t1`.`total_debt` AS `total_debt`,
  `t1`.`execution_opening_month` AS `execution_opening_month`,
  `t1`.`pay_month` AS `pay_month`,
  `t1`.`payment_amount` AS `payment_amount`,
  `t1`.`payment_cnt` AS `payment_cnt`,
  `t1`.`has_payments` AS `has_payments`,
  CASE WHEN SUM(`t1`.`payment_amount`) OVER (PARTITION BY `t1`.`loan_id` ORDER BY `t1`.`pay_month` ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) >= `t1`.`total_debt` AND
      IFNULL(SUM(`t1`.`payment_amount`) OVER (PARTITION BY `t1`.`loan_id` ORDER BY `t1`.`pay_month` ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING), 0) < `t1`.`total_debt` THEN 1 ELSE 0 END AS `paid_off`
FROM `t1`;

--
-- Create view `v_r_vintage_info`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_vintage_info
AS
SELECT
  `vrvl`.`company_name` AS `company_name`,
  `vrvl`.`execution_opening_month` AS `execution_opening_month`,
  `vrvl`.`pay_month` AS `pay_month`,
  COUNT(`vrvl`.`loan_id`) AS `loans_count`,
  SUM(`vrvl`.`total_debt`) AS `total_debt`,
  SUM(`vrvl`.`payment_cnt`) AS `payments_count`,
  SUM(`vrvl`.`has_payments`) AS `unique_payments_count`,
  SUM(`vrvl`.`payment_amount`) AS `payments_amount`,
  SUM(`vrvl`.`payment_amount`) / SUM(`vrvl`.`payment_cnt`) AS `avg_pmt`,
  SUM(`vrvl`.`paid_off`) AS `paid_off`
FROM `eattorney_crm`.`v_r_vintage_list` `vrvl`
GROUP BY `vrvl`.`company_name`,
         `vrvl`.`execution_opening_month`,
         `vrvl`.`pay_month` UNION ALL SELECT
  `vrvl`.`company_name` AS `company_name`,
  `vrvl`.`execution_opening_month` AS `execution_opening_month`,
  '2099-1-1' AS `pay_month`,
  NULL AS `NULL`,
  NULL AS `NULL`,
  NULL AS `NULL`,
  COUNT(DISTINCT CASE WHEN `vrvl`.`has_payments` = 1 THEN `vrvl`.`loan_id` END) AS `unique_payments_count`,
  NULL AS `NULL`,
  NULL AS `NULL`,
  NULL AS `NULL`
FROM `eattorney_crm`.`v_r_vintage_list` `vrvl`
GROUP BY `vrvl`.`company_name`,
         `vrvl`.`execution_opening_month`;

--
-- Create view `v_r_main_report_general`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_main_report_general
AS
SELECT
  `vrmrl`.`company_name` AS `company_name`,
  'inscription_made' AS `measure`,
  `vrmrl`.`inscription_month` AS `report_month`,
  SUM(`vrmrl`.`inscription_made`) AS `report_count`,
  SUM(`vrmrl`.`inscription_amount`) AS `report_amount`
FROM `eattorney_crm`.`v_r_main_report_list` `vrmrl`
WHERE `vrmrl`.`inscription_month` IS NOT NULL
GROUP BY `vrmrl`.`company_name`,
         `vrmrl`.`inscription_month` UNION ALL SELECT
  `vrmrl`.`company_name` AS `company_name`,
  'execution_opened' AS `measure`,
  `vrmrl`.`execution_month` AS `report_month`,
  SUM(`vrmrl`.`execution_opened`) AS `report_count`,
  SUM(`vrmrl`.`execution_amount`) AS `report_amount`
FROM `eattorney_crm`.`v_r_main_report_list` `vrmrl`
WHERE `vrmrl`.`execution_month` IS NOT NULL
GROUP BY `vrmrl`.`company_name`,
         `vrmrl`.`execution_month` UNION ALL SELECT
  `vrmrl`.`company_name` AS `company_name`,
  'sal_deduction_made' AS `measure`,
  `vrmrl`.`sal_deduction_month` AS `report_month`,
  SUM(`vrmrl`.`sal_deduction_made`) AS `report_count`,
  NULL AS `report_amount`
FROM `eattorney_crm`.`v_r_main_report_list` `vrmrl`
WHERE `vrmrl`.`sal_deduction_month` IS NOT NULL
GROUP BY `vrmrl`.`company_name`,
         `vrmrl`.`sal_deduction_month` UNION ALL SELECT
  `vrvl`.`company_name` AS `company_name`,
  'unique_payments' AS `measure`,
  `vrvl`.`pay_month` AS `report_month`,
  SUM(`vrvl`.`has_payments`) AS `report_count`,
  NULL AS `report_amount`
FROM `eattorney_crm`.`v_r_vintage_list` `vrvl`
GROUP BY `vrvl`.`company_name`,
         `vrvl`.`pay_month` UNION ALL SELECT
  `vrvl`.`company_name` AS `company_name`,
  'unique_payments_total' AS `measure`,
  '2099-1-1' AS `report_month`,
  COUNT(DISTINCT CASE WHEN `vrvl`.`has_payments` THEN `vrvl`.`loan_id` END) AS `report_count`,
  NULL AS `report_amount`
FROM `eattorney_crm`.`v_r_vintage_list` `vrvl`
GROUP BY `vrvl`.`company_name`;

--
-- Create view `v_r_private_executors`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_private_executors
AS
WITH t1
AS
(SELECT
      `vrmrl`.`company_name` AS `company_name`,
      `vrmrl`.`private_executor_name` AS `private_executor_name`,
      `vrmrl`.`sal_deduction_month` AS `sal_deduction_month`,
      SUM(`vrmrl`.`total_debt`) AS `total_debt`,
      COUNT(`vrmrl`.`sal_deduction_document_date`) AS `sal_deduction_count`
    FROM `eattorney_crm`.`v_r_main_report_list` `vrmrl`
    WHERE `vrmrl`.`sal_deduction_document_date` IS NOT NULL
    GROUP BY `vrmrl`.`company_name`,
             `vrmrl`.`private_executor_name`,
             `vrmrl`.`sal_deduction_month`), t2
AS
(SELECT
      `vrmrl`.`company_name` AS `company_name`,
      `vrmrl`.`private_executor_name` AS `private_executor_name`,
      `vrmrl`.`sal_deduction_month` AS `sal_deduction_month`,
      `vrpl`.`pay_month` AS `pay_month`,
      COUNT(DISTINCT `vrpl`.`loan_id`) AS `pmt_count`,
      SUM(`vrpl`.`payment_amount`) AS `pmt_amt`
    FROM (`eattorney_crm`.`v_r_main_report_list` `vrmrl`
      JOIN `eattorney_crm`.`v_r_payments_list` `vrpl`
        ON (`vrmrl`.`loan_id` = `vrpl`.`loan_id`))
    WHERE `vrmrl`.`sal_deduction_document_date` IS NOT NULL
    GROUP BY `vrmrl`.`company_name`,
             `vrmrl`.`private_executor_name`,
             `vrmrl`.`sal_deduction_month`,
             `vrpl`.`pay_month`)
SELECT
  `t1`.`company_name` AS `company_name`,
  `t1`.`private_executor_name` AS `private_executor_name`,
  `t1`.`sal_deduction_month` AS `sal_deduction_month`,
  `t1`.`total_debt` AS `total_debt`,
  `t1`.`sal_deduction_count` AS `sal_deduction_count`,
  `t2`.`pay_month` AS `pay_month`,
  `t2`.`pmt_count` AS `pmt_count`,
  `t2`.`pmt_amt` AS `pmt_amt`
FROM (`t1`
  LEFT JOIN `t2`
    ON (`t1`.`company_name` = `t2`.`company_name`
    AND `t1`.`private_executor_name` = `t2`.`private_executor_name`
    AND `t1`.`sal_deduction_month` = `t2`.`sal_deduction_month`));

--
-- Create view `v_r_payments_by_days`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_payments_by_days
AS
SELECT
  `vrpl`.`company_name` AS `company_name`,
  `vrpl`.`pay_month` AS `pay_month`,
  `vrpl`.`pay_day` AS `pay_day`,
  SUM(`vrpl`.`payment_amount`) AS `payment_amount`,
  COUNT(`vrpl`.`payment_id`) AS `payment_count`
FROM `v_r_payments_list` `vrpl`
GROUP BY `vrpl`.`company_name`,
         `vrpl`.`pay_month`,
         `vrpl`.`pay_day`;

--
-- Create view `v_r_main_report_payments`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_r_main_report_payments
AS
SELECT
  `vrpl`.`company_name` AS `company_name`,
  `vrpl`.`pay_month` AS `pay_month`,
  CASE WHEN `vrpl`.`payment_date` > `vrmrl`.`sal_deduction_document_date` THEN 'sal_deduction' WHEN `vrpl`.`payment_date` > `vrmrl`.`execution_opening_date` THEN 'execution' WHEN `vrpl`.`payment_date` > `vrmrl`.`inscription_date` THEN 'inscription' ELSE 'income_confirm' END AS `payment_stage`,
  SUM(`vrpl`.`payment_amount`) AS `payment_amount`,
  COUNT(`vrpl`.`payment_id`) AS `payment_count`,
  MAX(`vrpl`.`payment_amount`) AS `max_payment_amount`
FROM (`v_r_payments_list` `vrpl`
  LEFT JOIN `v_r_main_report_list` `vrmrl`
    ON (`vrmrl`.`loan_id` = `vrpl`.`loan_id`))
WHERE `vrpl`.`payment_amount` > 0
GROUP BY `vrpl`.`company_name`,
         `vrpl`.`pay_month`,
         CASE WHEN `vrpl`.`payment_date` > `vrmrl`.`sal_deduction_document_date` THEN 'sal_deduction' WHEN `vrpl`.`payment_date` > `vrmrl`.`execution_opening_date` THEN 'execution' WHEN `vrpl`.`payment_date` > `vrmrl`.`inscription_date` THEN 'inscription' ELSE 'income_confirm' END;

--
-- Create view `v_payment_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_payment_info
AS
SELECT
  `p`.`loan_id` AS `loan_id`,
  `p`.`company_id` AS `company_id`,
  `p`.`payment_date` AS `payment_date`,
  `p`.`payment_amount` AS `payment_amount`,
  `p`.`payment_details` AS `payment_details`,
  `p`.`contragent_name` AS `contragent_name`,
  `p`.`execution_number` AS `execution_number`,
  `p`.`inscription_number` AS `inscription_number`,
  `p`.`payment_source` AS `payment_source`,
  `dpt`.`payment_type_name` AS `payment_type_name`,
  CASE WHEN `p`.`private_executor_found` = 1 THEN 'Y' ELSE 'N' END AS `private_executor_found`
FROM (`payment` `p`
  JOIN `dim_payment_type` `dpt`
    ON (`p`.`payment_type_id` = `dpt`.`payment_type_id`));

--
-- Create view `v_model_pmt_info`
--
CREATE 
	DEFINER = 'reports_reader'@'%'
VIEW v_model_pmt_info
AS
WITH loans
AS
(SELECT
      `eattorney_crm`.`payment`.`loan_id` AS `loan_id`
    FROM `eattorney_crm`.`payment`
    WHERE `eattorney_crm`.`payment`.`loan_id` IS NOT NULL
    GROUP BY `eattorney_crm`.`payment`.`loan_id`
    HAVING COUNT(1) >= 3), pmts
AS
(SELECT
      `eattorney_crm`.`payment`.`loan_id` AS `loan_id`,
      `eattorney_crm`.`payment`.`payment_date` AS `payment_date`,
      `eattorney_crm`.`payment`.`payment_amount` AS `payment_amount`,
      TO_DAYS(`eattorney_crm`.`payment`.`payment_date`) - TO_DAYS(LAG(`eattorney_crm`.`payment`.`payment_date`, 1) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`)) AS `days_since_prev_payment`,
      LAG(`eattorney_crm`.`payment`.`payment_amount`, 1) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`) AS `prev_payment_amount`,
      COUNT(`eattorney_crm`.`payment`.`payment_id`) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`) - 1 AS `total_prev_payments`,
      AVG(`eattorney_crm`.`payment`.`payment_amount`) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`) AS `avg_prev_payments_amount`,
      FIRST_VALUE(`eattorney_crm`.`payment`.`payment_amount`) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`) AS `first_payment_amount`,
      TO_DAYS(`eattorney_crm`.`payment`.`payment_date`) - TO_DAYS(FIRST_VALUE(`eattorney_crm`.`payment`.`payment_date`) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`)) AS `days_since_first_payment`,
      TO_DAYS(`eattorney_crm`.`payment`.`payment_date`) - TO_DAYS(LEAD(`eattorney_crm`.`payment`.`payment_date`, 1) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`)) AS `days_to_next_payment`,
      LEAD(`eattorney_crm`.`payment`.`payment_amount`, 1) OVER (PARTITION BY `eattorney_crm`.`payment`.`loan_id` ORDER BY `eattorney_crm`.`payment`.`payment_date`) AS `next_payment_amount`
    FROM `eattorney_crm`.`payment`
    WHERE `eattorney_crm`.`payment`.`loan_id` IN (SELECT
        `loans`.`loan_id`
      FROM `loans`)), pmt_flags
AS
(SELECT
      `pmts`.`loan_id` AS `loan_id`,
      `pmts`.`payment_date` AS `payment_date`,
      `pmts`.`payment_amount` AS `payment_amount`,
      `pmts`.`days_since_prev_payment` AS `days_since_prev_payment`,
      `pmts`.`prev_payment_amount` AS `prev_payment_amount`,
      `pmts`.`total_prev_payments` AS `total_prev_payments`,
      `pmts`.`avg_prev_payments_amount` AS `avg_prev_payments_amount`,
      `pmts`.`first_payment_amount` AS `first_payment_amount`,
      `pmts`.`days_since_first_payment` AS `days_since_first_payment`,
      `pmts`.`days_to_next_payment` AS `days_to_next_payment`,
      `pmts`.`next_payment_amount` AS `next_payment_amount`,
      CASE WHEN `pmts`.`days_since_prev_payment` IS NULL THEN 1 ELSE 0 END AS `is_first_pmt`,
      CASE WHEN `pmts`.`days_to_next_payment` IS NULL THEN 1 ELSE 0 END AS `is_last_pmt`
    FROM `pmts`)
SELECT
  `pmt_flags`.`loan_id` AS `loan_id`,
  `pmt_flags`.`payment_date` AS `payment_date`,
  `pmt_flags`.`payment_amount` AS `payment_amount`,
  `pmt_flags`.`days_since_prev_payment` AS `days_since_prev_payment`,
  `pmt_flags`.`prev_payment_amount` AS `prev_payment_amount`,
  `pmt_flags`.`total_prev_payments` AS `total_prev_payments`,
  `pmt_flags`.`avg_prev_payments_amount` AS `avg_prev_payments_amount`,
  `pmt_flags`.`first_payment_amount` AS `first_payment_amount`,
  `pmt_flags`.`days_since_first_payment` AS `days_since_first_payment`,
  `pmt_flags`.`days_to_next_payment` AS `days_to_next_payment`,
  `pmt_flags`.`next_payment_amount` AS `next_payment_amount`,
  `pmt_flags`.`is_first_pmt` AS `is_first_pmt`,
  `pmt_flags`.`is_last_pmt` AS `is_last_pmt`
FROM `pmt_flags`;

--
-- Create table `dim_activity_type`
--
CREATE TABLE dim_activity_type (
  activity_type_id INT(11) NOT NULL AUTO_INCREMENT,
  activity_type_name VARCHAR(50) DEFAULT NULL,
  PRIMARY KEY (activity_type_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create table `activity`
--
CREATE TABLE activity (
  activity_id INT(11) NOT NULL AUTO_INCREMENT,
  loan_id INT(11) NOT NULL,
  activity_type_id INT(11) NOT NULL,
  activity_date DATE NOT NULL,
  activity_details VARCHAR(500) DEFAULT NULL,
  answer_date DATE DEFAULT NULL,
  borrower_full_name_ext VARCHAR(100) DEFAULT NULL,
  borrower_ssn_ext VARCHAR(20) DEFAULT NULL,
  loan_number_ext VARCHAR(30) DEFAULT NULL,
  loan_date_ext DATE DEFAULT NULL,
  address VARCHAR(150) DEFAULT NULL,
  debt_amount DECIMAL(12, 2) DEFAULT NULL,
  bank VARCHAR(100) DEFAULT NULL,
  notes VARCHAR(50) DEFAULT NULL,
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (activity_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 712,
AVG_ROW_LENGTH = 431,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE activity 
  ADD CONSTRAINT activity_ibfk_1 FOREIGN KEY (loan_id)
    REFERENCES loan(loan_id);

--
-- Create foreign key
--
ALTER TABLE activity 
  ADD CONSTRAINT activity_ibfk_2 FOREIGN KEY (activity_type_id)
    REFERENCES dim_activity_type(activity_type_id);

--
-- Create foreign key
--
ALTER TABLE activity 
  ADD CONSTRAINT activity_ibfk_3 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE activity 
  ADD CONSTRAINT activity_ibfk_4 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

--
-- Create view `v_loan_general_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_loan_general_info
AS
SELECT
  `l`.`loan_id` AS `loan_id`,
  `l`.`loan_number` AS `loan_number`,
  `l`.`loan_id_ext` AS `loan_id_ext`,
  `l`.`company_id` AS `company_id`,
  `dc`.`company_name` AS `company_name`,
  `dls`.`loan_status_name` AS `loan_status_name`,
  `b`.`full_name` AS `full_name`,
  `b`.`ssn` AS `ssn`,
  `l`.`loan_date` AS `loan_date`,
  `l`.`loan_amount` AS `loan_amount`,
  `lcd`.`principal_debt` + `lcd`.`interest_debt` + `lcd`.`commission_debt` + `lcd`.`penalty_debt` AS `total_debt`,
  `lcd`.`principal_debt` AS `principal_debt`,
  `lcd`.`interest_debt` AS `interest_debt`,
  `lcd`.`commission_debt` AS `commission_debt`,
  `lcd`.`penalty_debt` AS `penalty_debt`,
  CONCAT((SELECT
      COUNT(`p`.`payment_id`)
    FROM `payment` `p`
    WHERE `p`.`loan_id` = `l`.`loan_id`), ' / ', (SELECT
      IFNULL(SUM(`p`.`payment_amount`), 0)
    FROM `payment` `p`
    WHERE `p`.`loan_id` = `l`.`loan_id`)) AS `pmt_summary`,
  CONCAT((SELECT
      COUNT(`le`.`loan_expenses_id`)
    FROM `loan_expenses` `le`
    WHERE `le`.`loan_id` = `l`.`loan_id`), ' / ', (SELECT
      IFNULL(SUM(`le`.`payment_amount`), 0)
    FROM `loan_expenses` `le`
    WHERE `le`.`loan_id` = `l`.`loan_id`)) AS `loan_exp_summary`,
  (SELECT
      COUNT(`a`.`activity_id`)
    FROM `activity` `a`
    WHERE `a`.`loan_id` = `l`.`loan_id`) AS `activity_cnt`,
  (SELECT
      COUNT(`t`.`trial_id`)
    FROM `trial` `t`
    WHERE `t`.`loan_id` = `l`.`loan_id`) AS `trial_cnt`,
  (SELECT
      `p`.`payment_date` + INTERVAL -`pr`.`days_to_next_payment` DAY
    FROM (`payment` `p`
      JOIN `predicted_next_payment` `pr`
        ON (`p`.`loan_id` = `pr`.`loan_id`))
    WHERE `p`.`loan_id` = `l`.`loan_id`
    ORDER BY `p`.`payment_date` DESC LIMIT 1) AS `predicted_next_pmt_date`,
  (SELECT
      `pr`.`predicted_pmt_amount`
    FROM `predicted_next_payment` `pr`
    WHERE `l`.`loan_id` = `pr`.`loan_id` LIMIT 1) AS `predicted_next_pmt_amount`
FROM ((((`loan` `l`
  JOIN `borrower` `b`
    ON (`l`.`borrower_id` = `b`.`borrower_id`))
  JOIN `dim_company` `dc`
    ON (`l`.`company_id` = `dc`.`company_id`))
  JOIN `loan_calculated_debt` `lcd`
    ON (`l`.`loan_id` = `lcd`.`loan_id`
    AND CURRENT_TIMESTAMP() BETWEEN `lcd`.`valid_from` AND `lcd`.`valid_to`))
  LEFT JOIN `dim_loan_status` `dls`
    ON (`l`.`loan_status_id` = `dls`.`loan_status_id`));

--
-- Create view `v_activity_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_activity_info
AS
SELECT
  `a`.`loan_id` AS `loan_id`,
  `a`.`activity_date` AS `activity_date`,
  `a`.`activity_details` AS `activity_details`,
  `a`.`answer_date` AS `answer_date`,
  `a`.`bank` AS `bank`,
  `a`.`notes` AS `notes`
FROM `activity` `a`;

--
-- Create table `dim_address_type`
--
CREATE TABLE dim_address_type (
  address_type_id INT(11) NOT NULL AUTO_INCREMENT,
  address_type_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (address_type_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 21,
AVG_ROW_LENGTH = 819,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `address_type_name` on table `dim_address_type`
--
ALTER TABLE dim_address_type 
  ADD UNIQUE INDEX address_type_name(address_type_name);

--
-- Create table `address`
--
CREATE TABLE address (
  address_id INT(11) NOT NULL AUTO_INCREMENT,
  borrower_id INT(11) NOT NULL,
  address_type_id INT(11) DEFAULT NULL,
  address_id_ext VARCHAR(30) DEFAULT NULL,
  zip_code VARCHAR(10) DEFAULT NULL,
  region VARCHAR(250) DEFAULT NULL,
  district VARCHAR(250) DEFAULT NULL,
  city VARCHAR(250) DEFAULT NULL,
  street VARCHAR(250) DEFAULT NULL,
  house_appartment VARCHAR(250) DEFAULT NULL,
  priority INT(11) DEFAULT NULL,
  is_primary BIT(1) NOT NULL DEFAULT b'0',
  is_active BIT(1) NOT NULL DEFAULT b'1',
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (address_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 655750,
AVG_ROW_LENGTH = 166,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE address 
  ADD CONSTRAINT address_ibfk_1 FOREIGN KEY (borrower_id)
    REFERENCES borrower(borrower_id);

--
-- Create foreign key
--
ALTER TABLE address 
  ADD CONSTRAINT address_ibfk_2 FOREIGN KEY (address_type_id)
    REFERENCES dim_address_type(address_type_id);

--
-- Create foreign key
--
ALTER TABLE address 
  ADD CONSTRAINT address_ibfk_3 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE address 
  ADD CONSTRAINT address_ibfk_4 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

DELIMITER $$

--
-- Create procedure `etl_addresses_from_loan_info_file`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_addresses_from_loan_info_file()
BEGIN

  SET @procedure_name = 'etl_addresses_from_loan_info_file';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_loan_initial_info LIMIT 1);

UPDATE staging_loan_initial_info src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON dc.company_id = l.company_id
  AND src.loan_id = l.loan_id_ext
JOIN dim_address_type dat
  ON dat.address_type_name = 'Registration from Loan Info'
JOIN address trg
  ON l.borrower_id = trg.borrower_id
  AND dat.address_type_id = trg.address_type_id
SET trg.street = src.registration_address,
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO address (borrower_id, address_type_id, street, is_primary, upload_id, modified_by)
  SELECT
    l.borrower_id,
    dat.address_type_id,
    src.registration_address,
    1,
    src.upload_id,
    src.user_id
  FROM staging_loan_initial_info src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON dc.company_id = l.company_id
      AND src.loan_id = l.loan_id_ext
    JOIN dim_address_type dat
      ON dat.address_type_name = 'Registration from Loan Info'
    LEFT JOIN address a
      ON l.borrower_id = a.borrower_id
      AND dat.address_type_id = a.address_type_id
  WHERE src.registration_address IS NOT NULL
  AND a.address_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;
END
$$

--
-- Create procedure `etl_address_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_address_full()
BEGIN

  SET @procedure_name = 'etl_address_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_address LIMIT 1);

UPDATE staging_address src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON dc.company_id = l.company_id
  AND src.loan_id = l.loan_id_ext
LEFT JOIN dim_address_type dat
  ON src.address_type = dat.address_type_name
JOIN address trg
  ON l.borrower_id = trg.borrower_id
  AND src.address_id = trg.address_id_ext
SET trg.address_type_id = IFNULL(dat.address_type_id, trg.address_type_id),
    /*update begin*/
    trg.zip_code = src.zip_code,
    trg.region = src.region,
    trg.district = src.district,
    trg.city = src.city,
    trg.street = src.street,
    trg.house_appartment = src.house_appartment,
    trg.priority = src.priority /*update end*/,
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO address (/*insert begin*/
borrower_id,
address_type_id,
address_id_ext,
zip_code,
region,
district,
city,
street,
house_appartment,
priority /*insert end*/,
upload_id,
modified_by)
  SELECT /*select begin*/
    l.borrower_id,
    dat.address_type_id,
    src.address_id,
    src.zip_code,
    src.region,
    src.district,
    src.city,
    src.street,
    src.house_appartment,
    src.priority /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_address src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON dc.company_id = l.company_id
      AND src.loan_id = l.loan_id_ext
    LEFT JOIN dim_address_type dat
      ON src.address_type = dat.address_type_name
    LEFT JOIN address a
      ON l.borrower_id = a.borrower_id
      AND src.address_id = a.address_id_ext
  WHERE src.address_id IS NOT NULL
  AND a.address_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_address`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_address()
BEGIN

  SET @procedure_name = 'etl_address';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_address LIMIT 1);

UPDATE staging_address src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON dc.company_id = l.company_id
  AND src.loan_id = l.loan_id_ext
LEFT JOIN dim_address_type dat
  ON src.address_type = dat.address_type_name
JOIN address trg
  ON l.borrower_id = trg.borrower_id
  AND src.address_id = trg.address_id_ext
SET trg.address_type_id = IFNULL(dat.address_type_id, trg.address_type_id),
    trg.zip_code = src.zip_code,
    trg.region = src.region,
    trg.district = src.district,
    trg.city = src.city,
    trg.street = src.street,
    trg.house_appartment = src.house_appartment,
    trg.priority = src.priority,
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO address (borrower_id,
address_type_id,
address_id_ext,
zip_code,
region,
district,
city,
street,
house_appartment,
priority,
upload_id,
modified_by)
  SELECT
    l.borrower_id,
    dat.address_type_id,
    src.address_id,
    src.zip_code,
    src.region,
    src.district,
    src.city,
    src.street,
    src.house_appartment,
    src.priority,
    src.upload_id,
    src.user_id
  FROM staging_address src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON dc.company_id = l.company_id
      AND src.loan_id = l.loan_id_ext
    LEFT JOIN dim_address_type dat
      ON src.address_type = dat.address_type_name
    LEFT JOIN address a
      ON l.borrower_id = a.borrower_id
      AND src.address_id = a.address_id_ext
  WHERE src.address_id IS NOT NULL
  AND a.address_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

DELIMITER ;

--
-- Create view `v_borrower_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_borrower_info
AS
SELECT
  `l`.`loan_id` AS `loan_id`,
  `b`.`first_name` AS `first_name`,
  `b`.`middle_name` AS `middle_name`,
  `b`.`last_name` AS `last_name`,
  `b`.`ssn` AS `ssn`,
  `b`.`birth_date` AS `birth_date`,
  `b`.`birth_place` AS `birth_place`,
  (SELECT
      `a`.`street`
    FROM (`address` `a`
      JOIN `dim_address_type` `dat`
        ON (`a`.`address_type_id` = `dat`.`address_type_id`
        AND `dat`.`address_type_name` = 'Registration from Loan Info'))
    WHERE `a`.`borrower_id` = `b`.`borrower_id` LIMIT 1) AS `registration_address`,
  `b`.`work_place` AS `work_place`,
  `b`.`passport_number` AS `passport_number`,
  `b`.`passport_issuer` AS `passport_issuer`,
  `b`.`passport_issue_date` AS `passport_issue_date`
FROM (`borrower` `b`
  JOIN `loan` `l`
    ON (`b`.`borrower_id` = `l`.`borrower_id`));

--
-- Create view `v_address_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_address_info
AS
SELECT
  `l`.`loan_id` AS `loan_id`,
  `dat`.`address_type_name` AS `address_type_name`,
  `a`.`zip_code` AS `zip_code`,
  `a`.`region` AS `region`,
  `a`.`district` AS `district`,
  `a`.`city` AS `city`,
  `a`.`street` AS `street`,
  `a`.`house_appartment` AS `house_appartment`,
  `a`.`priority` AS `priority`,
  `a`.`is_primary` AS `is_primary`,
  CASE WHEN `a`.`is_primary` = 1 THEN 'Y' ELSE 'Y' END AS `is_primary_txt`,
  `a`.`is_active` AS `is_active`,
  CASE WHEN `a`.`is_active` = 1 THEN 'Y' ELSE 'Y' END AS `is_active_txt`
FROM ((`address` `a`
  JOIN `loan` `l`
    ON (`a`.`borrower_id` = `l`.`borrower_id`))
  LEFT JOIN `dim_address_type` `dat`
    ON (`a`.`address_type_id` = `dat`.`address_type_id`));

--
-- Create table `dim_phone_type`
--
CREATE TABLE dim_phone_type (
  phone_type_id INT(11) NOT NULL AUTO_INCREMENT,
  phone_type_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (phone_type_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 14,
AVG_ROW_LENGTH = 1365,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `phone_type_name` on table `dim_phone_type`
--
ALTER TABLE dim_phone_type 
  ADD UNIQUE INDEX phone_type_name(phone_type_name);

--
-- Create table `dim_phone_status`
--
CREATE TABLE dim_phone_status (
  phone_status_id INT(11) NOT NULL AUTO_INCREMENT,
  phone_status_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (phone_status_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 23,
AVG_ROW_LENGTH = 744,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `phone_status_name` on table `dim_phone_status`
--
ALTER TABLE dim_phone_status 
  ADD UNIQUE INDEX phone_status_name(phone_status_name);

--
-- Create table `phone`
--
CREATE TABLE phone (
  phone_id INT(11) NOT NULL AUTO_INCREMENT,
  borrower_id INT(11) NOT NULL,
  phone_number VARCHAR(18) DEFAULT NULL,
  phone_type_id INT(11) DEFAULT NULL,
  phone_status_id INT(11) DEFAULT NULL,
  last_rpc_date DATE DEFAULT NULL,
  last_ptp_date DATE DEFAULT NULL,
  comment VARCHAR(250) DEFAULT NULL,
  priority INT(11) DEFAULT NULL,
  is_primary BIT(1) NOT NULL DEFAULT b'0',
  is_active BIT(1) NOT NULL DEFAULT b'1',
  upload_id INT(11) DEFAULT NULL,
  modified_by INT(11) DEFAULT NULL,
  PRIMARY KEY (phone_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 648003,
AVG_ROW_LENGTH = 92,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE phone 
  ADD CONSTRAINT phone_ibfk_1 FOREIGN KEY (borrower_id)
    REFERENCES borrower(borrower_id);

--
-- Create foreign key
--
ALTER TABLE phone 
  ADD CONSTRAINT phone_ibfk_2 FOREIGN KEY (phone_type_id)
    REFERENCES dim_phone_type(phone_type_id);

--
-- Create foreign key
--
ALTER TABLE phone 
  ADD CONSTRAINT phone_ibfk_3 FOREIGN KEY (phone_status_id)
    REFERENCES dim_phone_status(phone_status_id);

--
-- Create foreign key
--
ALTER TABLE phone 
  ADD CONSTRAINT phone_ibfk_4 FOREIGN KEY (upload_id)
    REFERENCES upload_log(upload_id);

--
-- Create foreign key
--
ALTER TABLE phone 
  ADD CONSTRAINT phone_ibfk_5 FOREIGN KEY (modified_by)
    REFERENCES dim_user(user_id);

--
-- Create view `v_phone_info`
--
CREATE 
	DEFINER = 'web_app'@'localhost'
VIEW v_phone_info
AS
SELECT
  `l`.`loan_id` AS `loan_id`,
  `p`.`phone_number` AS `phone_number`,
  `dpt`.`phone_type_name` AS `phone_type_name`,
  `dps`.`phone_status_name` AS `phone_status_name`,
  `p`.`last_rpc_date` AS `last_rpc_date`,
  `p`.`last_ptp_date` AS `last_ptp_date`,
  `p`.`comment` AS `comment`,
  `p`.`priority` AS `priority`,
  `p`.`is_primary` AS `is_primary`,
  `p`.`is_active` AS `is_active`,
  CASE WHEN `p`.`is_primary` = 1 THEN 'Yes' ELSE 'No' END AS `is_primary_txt`,
  CASE WHEN `p`.`is_active` = 1 THEN 'Yes' ELSE 'No' END AS `is_active_txt`
FROM (((`phone` `p`
  JOIN `loan` `l`
    ON (`p`.`borrower_id` = `l`.`borrower_id`))
  LEFT JOIN `dim_phone_type` `dpt`
    ON (`p`.`phone_type_id` = `dpt`.`phone_type_id`))
  LEFT JOIN `dim_phone_status` `dps`
    ON (`p`.`phone_status_id` = `dps`.`phone_status_id`));

DELIMITER $$

--
-- Create function `f_excel_str_to_date_uk`
--
CREATE 
	DEFINER = 'upload_service'@'%'
FUNCTION f_excel_str_to_date_uk(_excel_str text)
  RETURNS DATE
BEGIN

  RETURN STR_TO_DATE(_excel_str, '%e.%c.%Y');

END
$$

--
-- Create function `f_excel_str_to_decimal_en_us`
--
CREATE 
	DEFINER = 'upload_service'@'%'
FUNCTION f_excel_str_to_decimal_en_us(_excel_str text)
  RETURNS DECIMAL(12, 2)
BEGIN

  IF _excel_str = '-' THEN
    RETURN 0;
  END IF;

  IF NOT _excel_str REGEXP '^[+-]?[0-9]+(\\,[0-9]+)?\\.?[0-9]*$' THEN
    RETURN NULL;
  END IF;

  RETURN CAST(REPLACE(_excel_str, ',', '') AS decimal(12, 2));

END
$$

--
-- Create procedure `etl_trial_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_trial_full()
BEGIN

  SET @procedure_name = 'etl_trial_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_trial LIMIT 1);

UPDATE staging_trial src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON dc.company_id = l.company_id
  AND src.loan_id = l.loan_id_ext
JOIN trial trg
  ON l.loan_id = trg.loan_id
SET /*update begin*/
 trg.borrower_full_name_ext = src.borrower_full_name,
 trg.borrower_ssn_ext = src.borrower_ssn,
 trg.loan_number_ext = src.loan_number,
 trg.total_debt = f_excel_str_to_decimal_en_us(src.total_debt),
 trg.initial_creditor = src.Initial_creditor,
 trg.contact_phone_number = src.contact_phone_number,
 trg.trial_number = src.trial_number,
 trg.execution_number = src.execution_number,
 trg.court_name = src.court_name,
 trg.claim_date = f_excel_str_to_date_uk(src.claim_date),
 trg.trial_stage = src.trial_stage,
 trg.court_decision_promulgation_date = f_excel_str_to_date_uk(src.court_decision_promulgation_date),
 trg.comments = src.comments /*update end*/,
 trg.upload_id = src.upload_id,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO trial (/*insert begin*/
loan_id,
borrower_full_name_ext,
borrower_ssn_ext,
loan_number_ext,
total_debt,
initial_creditor,
contact_phone_number,
trial_number,
execution_number,
court_name,
claim_date,
trial_stage,
court_decision_promulgation_date,
comments /*insert end*/,
upload_id,
modified_by)
  SELECT /*select begin*/
    l.loan_id,
    src.borrower_full_name,
    src.borrower_ssn,
    src.loan_number,
    f_excel_str_to_decimal_en_us(src.total_debt),
    src.Initial_creditor,
    src.contact_phone_number,
    src.trial_number,
    src.execution_number,
    src.court_name,
    f_excel_str_to_date_uk(src.claim_date),
    src.trial_stage,
    f_excel_str_to_date_uk(src.court_decision_promulgation_date),
    src.comments /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_trial src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON dc.company_id = l.company_id
      AND src.loan_id = l.loan_id_ext
    LEFT JOIN trial t
      ON l.loan_id = t.loan_id
  WHERE src.loan_id IS NOT NULL
  AND t.loan_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_trial`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_trial()
BEGIN

  SET @procedure_name = 'etl_trial';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_trial LIMIT 1);

UPDATE staging_trial src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON dc.company_id = l.company_id
  AND src.loan_id = l.loan_id_ext
JOIN trial trg
  ON l.loan_id = trg.loan_id
SET trg.borrower_full_name_ext = src.borrower_full_name,
    trg.borrower_ssn_ext = src.borrower_ssn,
    trg.loan_number_ext = src.loan_number,
    trg.total_debt = f_excel_str_to_decimal_en_us(src.total_debt),
    trg.initial_creditor = src.Initial_creditor,
    trg.trial_number = src.trial_number,
    trg.execution_number = src.execution_number,
    trg.court_name = src.court_name,
    trg.claim_date = f_excel_str_to_date_uk(src.claim_date),
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO trial (loan_id,
borrower_full_name_ext,
borrower_ssn_ext,
loan_number_ext,
total_debt,
initial_creditor,
contact_phone_number,
trial_number,
execution_number,
court_name,
claim_date,
trial_stage,
court_decision_promulgation_date,
comments,
upload_id,
modified_by)
  SELECT
    l.loan_id,
    src.borrower_full_name,
    src.borrower_ssn,
    src.loan_number,
    f_excel_str_to_decimal_en_us(src.total_debt),
    src.Initial_creditor,
    src.contact_phone_number,
    src.trial_number,
    src.execution_number,
    src.court_name,
    f_excel_str_to_date_uk(src.claim_date),
    src.trial_stage,
    f_excel_str_to_date_uk(src.court_decision_promulgation_date),
    src.comments,
    src.upload_id,
    src.user_id
  FROM staging_trial src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON dc.company_id = l.company_id
      AND src.loan_id = l.loan_id_ext
    LEFT JOIN trial t
      ON l.loan_id = t.loan_id
  WHERE src.loan_id IS NOT NULL
  AND t.loan_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_payment_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_payment_full()
BEGIN

  SET @procedure_name = 'etl_payment_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_payment LIMIT 1);

UPDATE staging_payment src
JOIN dim_company dc
  ON src.company = dc.company_name
LEFT JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
JOIN payment trg
  ON (l.loan_id = trg.loan_id
  OR (l.loan_id IS NULL
  AND trg.loan_id IS NULL))
  AND dc.company_id = trg.company_id
  AND f_excel_str_to_date_uk(src.payment_date) = trg.payment_date
  AND src.document_no = trg.document_no
  AND src.contragent_code = trg.contragent_code
SET /*update begin*/
 trg.payment_amount = f_excel_str_to_decimal_en_us(src.payment_amount),
 trg.contragent_name = src.contragent_name,
 trg.payment_details = src.payment_details,
 trg.debit_iban = src.debit_iban,
 trg.credit_iban = src.credit_iban,
 trg.bank_code = src.bank_code,
 trg.borrower_ssn_ext = src.borrower_ssn,
 trg.loan_number_ext = src.loan_number,
 trg.execution_number = src.execution_number,
 trg.borrower_full_name_ext = src.borrower_full_name,
 trg.inscription_number = src.inscriptionNumber,
 trg.payment_source = src.payment_source,
 trg.payment_type_id = (SELECT
     dpt.payment_type_id
   FROM dim_payment_type dpt
   WHERE src.payment_type = dpt.payment_type_name),
 trg.match_type_id = (SELECT
     dmt.match_type_id
   FROM dim_match_type dmt
   WHERE src.match_type = dmt.match_type_name),
 trg.private_executor_found = CASE src.private_executor_found WHEN 'Да' THEN 1 WHEN 'Нет' THEN 0 END /*update end*/,
 trg.upload_id = src.upload_id,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO payment (/*insert begin*/
company_id,
loan_id,
payment_date,
payment_amount,
contragent_name,
payment_details,
document_no,
debit_iban,
credit_iban,
bank_code,
contragent_code,
borrower_ssn_ext,
loan_number_ext,
execution_number,
loan_id_ext,
borrower_full_name_ext,
inscription_number,
payment_source,
payment_type_id,
match_type_id,
private_executor_found /*insert end*/,
upload_id,
modified_by)
  SELECT /*select begin*/
    dc.company_id,
    l.loan_id,
    f_excel_str_to_date_uk(src.payment_date),
    f_excel_str_to_decimal_en_us(src.payment_amount),
    src.contragent_name,
    src.payment_details,
    src.document_no,
    src.debit_iban,
    src.credit_iban,
    src.bank_code,
    src.contragent_code,
    src.borrower_ssn,
    src.loan_number,
    src.execution_number,
    src.loan_id,
    src.borrower_full_name,
    src.inscriptionNumber,
    src.payment_source,
    dpt.payment_type_id,
    dmt.match_type_id,
    CASE src.private_executor_found WHEN 'Да' THEN 1 WHEN 'Нет' THEN 0 END /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_payment src
    JOIN dim_company dc
      ON src.company = dc.company_name
    LEFT JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    JOIN dim_payment_type dpt
      ON src.payment_type = dpt.payment_type_name
    JOIN dim_match_type dmt
      ON src.match_type = dmt.match_type_name
    LEFT JOIN payment p
      ON (l.loan_id = p.loan_id
      OR (l.loan_id IS NULL
      AND p.loan_id IS NULL))
      AND dc.company_id = p.company_id
      AND f_excel_str_to_date_uk(src.payment_date) = p.payment_date
      AND src.document_no = p.document_no
      AND src.contragent_code = p.contragent_code
  WHERE src.payment_date IS NOT NULL
  AND src.payment_amount IS NOT NULL
  AND src.document_no IS NOT NULL
  AND src.contragent_code IS NOT NULL
  AND p.payment_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL AND 
     @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_payment`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_payment()
BEGIN

  SET @procedure_name = 'etl_payment';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_payment LIMIT 1);

UPDATE staging_payment src
JOIN dim_company dc
  ON src.company = dc.company_name
LEFT JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
JOIN payment trg
  ON (l.loan_id = trg.loan_id
  OR (l.loan_id IS NULL
  AND trg.loan_id IS NULL))
  AND dc.company_id = trg.company_id
  AND f_excel_str_to_date_uk(src.payment_date) = trg.payment_date
  AND src.document_no = trg.document_no
  AND src.contragent_code = trg.contragent_code
SET trg.payment_amount = f_excel_str_to_decimal_en_us(src.payment_amount),
    trg.contragent_name = src.contragent_name,
    trg.payment_details = src.payment_details,
    trg.debit_iban = src.debit_iban,
    trg.credit_iban = src.credit_iban,
    trg.bank_code = src.bank_code,
    trg.borrower_ssn_ext = src.borrower_ssn,
    trg.loan_number_ext = src.loan_number,
    trg.execution_number = src.execution_number,
    trg.borrower_full_name_ext = src.borrower_full_name,
    trg.inscription_number = src.inscriptionNumber,
    trg.payment_source = src.payment_source,
    trg.payment_type_id = (SELECT
        dpt.payment_type_id
      FROM dim_payment_type dpt
      WHERE src.payment_type = dpt.payment_type_name),
    trg.match_type_id = (SELECT
        dmt.match_type_id
      FROM dim_match_type dmt
      WHERE src.match_type = dmt.match_type_name),
    trg.private_executor_found = CASE src.private_executor_found WHEN 'Да' THEN 1 WHEN 'Нет' THEN 0 END,
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO payment (/*insert begin*/
company_id,
loan_id,
payment_date,
payment_amount,
contragent_name,
payment_details,
document_no,
debit_iban,
credit_iban,
bank_code,
contragent_code,
borrower_ssn_ext,
loan_number_ext,
execution_number,
loan_id_ext,
borrower_full_name_ext,
inscription_number,
payment_source,
payment_type_id,
match_type_id,
private_executor_found /*insert end*/,
upload_id,
modified_by)
  SELECT /*select begin*/
    dc.company_id,
    l.loan_id,
    f_excel_str_to_date_uk(src.payment_date),
    f_excel_str_to_decimal_en_us(src.payment_amount),
    src.contragent_name,
    src.payment_details,
    src.document_no,
    src.debit_iban,
    src.credit_iban,
    src.bank_code,
    src.contragent_code,
    src.borrower_ssn,
    src.loan_number,
    src.execution_number,
    src.loan_id,
    src.borrower_full_name,
    src.inscriptionNumber,
    src.payment_source,
    dpt.payment_type_id,
    dmt.match_type_id,
    CASE src.private_executor_found WHEN 'Да' THEN 1 WHEN 'Нет' THEN 0 END /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_payment src
    JOIN dim_company dc
      ON src.company = dc.company_name
    LEFT JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    JOIN dim_payment_type dpt
      ON src.payment_type = dpt.payment_type_name
    JOIN dim_match_type dmt
      ON src.match_type = dmt.match_type_name
    LEFT JOIN payment p
      ON (l.loan_id = p.loan_id
      OR (l.loan_id IS NULL
      AND p.loan_id IS NULL))
      AND dc.company_id = p.company_id
      AND f_excel_str_to_date_uk(src.payment_date) = p.payment_date
      AND src.document_no = p.document_no
      AND src.contragent_code = p.contragent_code
  WHERE src.payment_date IS NOT NULL
  AND src.payment_amount IS NOT NULL
  AND src.document_no IS NOT NULL
  AND src.contragent_code IS NOT NULL
  AND p.payment_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL AND 
     @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_loan_expenses_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_loan_expenses_full()
BEGIN

  SET @procedure_name = 'etl_loan_expenses_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_loan_expenses LIMIT 1);

UPDATE staging_loan_expenses src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
JOIN loan_expenses trg
  ON l.loan_id = trg.loan_id
  AND f_excel_str_to_date_uk(src.payment_date) = trg.payment_date
  AND src.document_no = trg.document_no
  AND src.contragent_code = trg.contragent_code
SET /*update begin*/
 trg.debit_iban = src.debit_iban,
 trg.credit_iban = src.credit_iban,
 trg.bank_code = src.bank_code,
 trg.contragent_name = src.contragent_name,
 trg.payment_details = src.payment_details,
 trg.payment_amount = src.payment_amount,
 trg.payment_type = src.payment_type /*update end*/,
 trg.upload_id = src.upload_id,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO loan_expenses (/*insert begin*/
loan_id,
debit_iban,
credit_iban,
bank_code,
contragent_name,
contragent_code,
payment_details,
payment_date,
document_no,
payment_amount,
payment_type /*insert end*/,
upload_id,
modified_by)
  SELECT /*select begin*/
    l.loan_id,
    src.debit_iban,
    src.credit_iban,
    src.bank_code,
    src.contragent_name,
    src.contragent_code,
    src.payment_details,
    f_excel_str_to_date_uk(src.payment_date),
    src.document_no,
    f_excel_str_to_decimal_en_us(src.payment_amount),
    src.payment_type /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_loan_expenses src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    LEFT JOIN loan_expenses le
      ON l.loan_id = le.loan_id
      AND f_excel_str_to_date_uk(src.payment_date) = le.payment_date
      AND src.document_no = le.document_no
      AND src.contragent_code = le.contragent_code
  WHERE src.loan_id IS NOT NULL
  AND src.payment_date IS NOT NULL
  AND src.payment_amount IS NOT NULL
  AND src.document_no IS NOT NULL
  AND src.contragent_code IS NOT NULL
  AND le.loan_expenses_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_loan_expenses`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_loan_expenses()
BEGIN

  SET @procedure_name = 'etl_loan_expenses';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_loan_expenses LIMIT 1);

UPDATE staging_loan_expenses src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
JOIN loan_expenses trg
  ON l.loan_id = trg.loan_id
  AND f_excel_str_to_date_uk(src.payment_date) = trg.payment_date
  AND src.document_no = trg.document_no
  AND src.contragent_code = trg.contragent_code
SET trg.debit_iban = src.debit_iban,
    trg.credit_iban = src.credit_iban,
    trg.bank_code = src.bank_code,
    trg.contragent_name = src.contragent_name,
    trg.payment_details = src.payment_details,
    trg.payment_amount = src.payment_amount,
    trg.payment_type = src.payment_type,
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO loan_expenses (loan_id,
debit_iban,
credit_iban,
bank_code,
contragent_name,
contragent_code,
payment_details,
payment_date,
document_no,
payment_amount,
payment_type,
upload_id,
modified_by)
  SELECT
    l.loan_id,
    src.debit_iban,
    src.credit_iban,
    src.bank_code,
    src.contragent_name,
    src.contragent_code,
    src.payment_details,
    f_excel_str_to_date_uk(src.payment_date),
    src.document_no,
    f_excel_str_to_decimal_en_us(src.payment_amount),
    src.payment_type,
    src.upload_id,
    src.user_id
  FROM staging_loan_expenses src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    LEFT JOIN loan_expenses le
      ON l.loan_id = le.loan_id
      AND f_excel_str_to_date_uk(src.payment_date) = le.payment_date
      AND src.document_no = le.document_no
      AND src.contragent_code = le.contragent_code
  WHERE src.loan_id IS NOT NULL
  AND src.payment_date IS NOT NULL
  AND src.payment_amount IS NOT NULL
  AND src.document_no IS NOT NULL
  AND src.contragent_code IS NOT NULL
  AND le.loan_expenses_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create function `f_excel_str_to_date_en_us`
--
CREATE 
	DEFINER = 'upload_service'@'%'
FUNCTION f_excel_str_to_date_en_us(_excel_str text)
  RETURNS DATE
BEGIN

  RETURN STR_TO_DATE(_excel_str, '%c/%e/%Y');

END
$$

--
-- Create procedure `etl_loan_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_loan_full()
BEGIN

  SET @procedure_name = 'etl_loan_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_loan_initial_info LIMIT 1);

UPDATE staging_loan_initial_info src
JOIN dim_company dc
  ON src.company = dc.company_name
LEFT JOIN dim_loan_status dls
  ON src.loan_status = dls.loan_status_name
LEFT JOIN dim_letter_status dls1
  ON src.letter_status = dls1.letter_status_name
JOIN loan trg
  ON src.loan_id = trg.loan_id_ext
  AND dc.company_id = trg.company_id
JOIN borrower b
  ON trg.borrower_id = b.borrower_id
SET /*update begin*/
 trg.company_id = dc.company_id,
 trg.borrower_id = b.borrower_id,
 trg.loan_id_ext = src.loan_id,
 trg.priority = src.priority,
 trg.box_number = src.box_number,
 trg.contracts_count = src.contracts_count,
 trg.has_contract = src.has_contract,
 trg.loan_status_id = dls.loan_status_id /*src.loan_status*/,
 trg.letter_status_id = dls1.letter_status_id,
 trg.letter_date = f_excel_str_to_date_en_us(src.letter_date),
 trg.loan_number = src.loan_number,
 trg.loan_date = f_excel_str_to_date_en_us(src.loan_date),
 trg.loan_amount = src.loan_amount,
 trg.last_payment_date = f_excel_str_to_date_en_us(src.last_payment_date),
 trg.letter_payoff_date = f_excel_str_to_date_en_us(src.letter_payoff_date),
 trg.total_debt_wo_pnlt = f_excel_str_to_decimal_en_us(src.total_debt_wo_penalty),
 trg.total_debt_wo_pnlt_w = src.total_debt_wo_penalty_words,
 trg.total_debt = f_excel_str_to_decimal_en_us(src.total_debt),
 trg.total_debt_w = src.total_debt_words,
 trg.principal_debt = f_excel_str_to_decimal_en_us(src.principal_debt),
 trg.principal_debt_w = src.principal_debt_words,
 trg.interest_debt = f_excel_str_to_decimal_en_us(src.interest_debt),
 trg.interest_debt_w = src.interest_debt_words,
 trg.commission_debt = f_excel_str_to_decimal_en_us(src.commission_debt),
 trg.commission_debt_w = src.commission_debt_words,
 trg.penalty_debt = f_excel_str_to_decimal_en_us(src.penalty_debt),
 trg.penalty_debt_w = src.penalty_debt_words,
 trg.inscription_cost = f_excel_str_to_decimal_en_us(src.inscription_cost),
 trg.inscription_cost_w = src.inscription_cost_words,
 trg.total_debt_w_inscr = f_excel_str_to_decimal_en_us(src.total_debt_w_inscription),
 trg.total_debt_w_inscr_w = src.total_debt_wInscription_words,
 trg.initial_creditor = src.initial_creditor,
 trg.initial_concession = src.initial_concession,
 trg.next_consession_aval = src.next_consession_aval,
 trg.fc_to_ams_concession = src.fct_to_ams_concession,
 trg.previous_creditor = src.previous_creditor,
 trg.current_creditor = src.current_creditor,
 trg.current_concession_number = src.current_concession_number,
 trg.current_concession_date = f_excel_str_to_date_en_us(src.current_concession_date) /*update end*/,
 trg.upload_id = src.upload_id,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO loan (company_id,
/*insert begin*/
borrower_id,
loan_id_ext,
priority,
box_number,
contracts_count,
has_contract,
loan_status_id,
letter_status_id,
letter_date,
loan_number,
loan_date,
loan_amount,
last_payment_date,
letter_payoff_date,
total_debt_wo_pnlt,
total_debt_wo_pnlt_w,
total_debt,
total_debt_w,
principal_debt,
principal_debt_w,
interest_debt,
interest_debt_w,
commission_debt,
commission_debt_w,
penalty_debt,
penalty_debt_w,
inscription_cost,
inscription_cost_w,
total_debt_w_inscr,
total_debt_w_inscr_w,
initial_creditor,
initial_concession,
next_consession_aval,
fc_to_ams_concession,
previous_creditor,
current_creditor,
current_concession_number,
current_concession_date /*insert end*/,
upload_id,
modified_by)
  SELECT
    dc.company_id,
    /*select begin*/
    b.borrower_id,
    src.loan_id AS loan_id_ext,
    src.priority,
    src.box_number,
    src.contracts_count,
    src.has_contract,
    dls.loan_status_id,
    dls1.letter_status_id,
    f_excel_str_to_date_en_us(src.letter_date) AS letter_date,
    src.loan_number,
    f_excel_str_to_date_en_us(src.loan_date) AS loan_date,
    src.loan_amount,
    f_excel_str_to_date_en_us(src.last_payment_date) AS last_payment_date,
    f_excel_str_to_date_en_us(src.letter_payoff_date) AS letter_payoff_date,
    f_excel_str_to_decimal_en_us(src.total_debt_wo_penalty) AS total_debt_wo_pnlt,
    src.total_debt_wo_penalty_words AS total_debt_wo_pnlt_w,
    f_excel_str_to_decimal_en_us(src.total_debt) AS total_debt,
    src.total_debt_words AS total_debt_w,
    f_excel_str_to_decimal_en_us(src.principal_debt) AS principal_debt,
    src.principal_debt_words AS principal_debt_w,
    f_excel_str_to_decimal_en_us(src.interest_debt) AS interest_debt,
    src.interest_debt_words AS interest_debt_w,
    f_excel_str_to_decimal_en_us(src.commission_debt) AS commission_debt,
    src.commission_debt_words AS commission_debt_w,
    f_excel_str_to_decimal_en_us(src.penalty_debt) AS penalty_debt,
    src.penalty_debt_words AS penalty_debt_w,
    f_excel_str_to_decimal_en_us(src.inscription_cost) AS inscription_cost,
    src.inscription_cost_words AS inscription_cost_w,
    f_excel_str_to_decimal_en_us(src.total_debt_w_inscription) AS total_debt_w_inscr,
    src.total_debt_wInscription_words AS total_debt_w_inscr_w,
    src.initial_creditor,
    src.initial_concession,
    src.next_consession_aval,
    src.fct_to_ams_concession,
    src.previous_creditor,
    src.current_creditor,
    src.current_concession_number,
    f_excel_str_to_date_en_us(src.current_concession_date) AS current_concession_date /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_loan_initial_info src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN borrower b
      ON IFNULL(src.borrower_ssn, src.loan_id) = b.borrower_id_ext
    LEFT JOIN dim_loan_status dls
      ON src.loan_status = dls.loan_status_name
    LEFT JOIN dim_letter_status dls1
      ON src.letter_status = dls1.letter_status_name
    LEFT JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
  WHERE src.loan_id IS NOT NULL
  AND dc.company_name IS NOT NULL
  AND l.loan_id IS NULL
  AND src.is_valid = 1;


  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

CALL etl_addresses_from_loan_info_file();

END
$$

--
-- Create procedure `etl_loan_contragent_info_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_loan_contragent_info_full()
BEGIN

  SET @procedure_name = 'etl_loan_contragent_info_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_contragent_info LIMIT 1);

UPDATE staging_contragent_info src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
LEFT JOIN dim_loan_status dls
  ON src.loan_status = dls.loan_status_name
JOIN loan_contragent_info trg
  ON l.loan_id = trg.loan_id
SET /*update begin*/
 trg.borrower_ssn = src.borrower_ssn,
 trg.borrower_full_name = src.borrower_full_name,
 trg.birth_date = f_excel_str_to_date_en_us(src.birth_date),
 trg.registration_address = src.registration_address,
 trg.total_debt = f_excel_str_to_decimal_en_us(src.total_debt),
 trg.prepayment_amount = f_excel_str_to_decimal_en_us(src.prepayment_amount),
 trg.prepayment_return_amount = f_excel_str_to_decimal_en_us(src.prepayment_return_amount),
 trg.total_payments_amount = f_excel_str_to_decimal_en_us(src.total_payments_amount),
 trg.inscription_number = src.inscription_number,
 trg.inscription_date = f_excel_str_to_date_uk(src.inscription_date),
 trg.notary_name = src.notary,
 trg.loan_transfer_date = f_excel_str_to_date_en_us(src.transfer_date),
 trg.prepayment_order_date = f_excel_str_to_date_en_us(src.prepayment_order_date),
 trg.prepayment_confirmation_date = f_excel_str_to_date_en_us(src.prepayment_confirmation_date),
 trg.region = src.region,
 trg.private_executor_name = src.private_executor_name,
 trg.loan_status2_id = dls.loan_status_id,
 trg.documents_transfer_date = f_excel_str_to_date_en_us(src.documents_transfer_date),
 trg.days_for_execution_opening = CAST(src.days_for_execution_opening AS int),
 trg.days_for_salary_deduction_transfer = CAST(src.days_for_salary_deduction_transfer AS int),
 trg.execution_opening_date = f_excel_str_to_date_en_us(src.execution_opening_date),
 trg.execution_number = src.execution_number,
 trg.access_id = src.access_id,
 trg.transferred_to_executor_status = LEFT(src.transferred_to_executor, 50),
 trg.execution_opening_status = LEFT(src.execution_opened, 50),
 trg.sal_deduction_transferred_status = LEFT(src.salary_deduction_transferred, 50),
 trg.income_found_status = LEFT(src.income_found, 50),
 trg.income_not_found_status = LEFT(src.income_not_found, 50),
 trg.information_not_available_status = LEFT(src.information_not_available, 50),
 trg.sal_deduction_document_date = f_excel_str_to_date_en_us(src.salary_deduction_document_date),
 trg.general_income_info = LEFT(src.general_income_info, 50),
 trg.sal_deduction_fail_reason = LEFT(src.salary_deduction_fail_reason, 100),
 trg.income_check_second_request_date = f_excel_str_to_date_en_us(src.income_check_second_request_date),
 trg.income_check_second_request_result = src.income_check_second_request_result,
 trg.execution_has_payments = src.execution_has_payments,
 trg.prepayment_return_control = src.prepayment_return_control,
 trg.discount_closure = src.discount_closure,
 trg.registry_number = src.registry_number,
 trg.check_needed = CASE WHEN src.check_needed = 'так' THEN 1 ELSE 0 END,
 trg.additional_checks_status = src.additional_checks_status,
 trg.additional_checks_number = src.additional_checks_number,
 trg.has_payments = CASE WHEN src.has_payments = 'так' THEN 1 ELSE 0 END,
 trg.loan_comment = src.comment /*update end*/,
 trg.upload_id = src.upload_id,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO loan_contragent_info (loan_id,
/*insert begin*/
borrower_ssn,
borrower_full_name,
birth_date,
registration_address,
total_debt,
prepayment_amount,
prepayment_return_amount,
total_payments_amount,
inscription_number,
inscription_date,
notary_name,
loan_transfer_date,
prepayment_order_date,
prepayment_confirmation_date,
region,
private_executor_name,
loan_status2_id,
documents_transfer_date,
days_for_execution_opening,
days_for_salary_deduction_transfer,
execution_opening_date,
execution_number,
access_id,
transferred_to_executor_status,
execution_opening_status,
sal_deduction_transferred_status,
income_found_status,
income_not_found_status,
information_not_available_status,
sal_deduction_document_date,
general_income_info,
sal_deduction_fail_reason,
income_check_second_request_date,
income_check_second_request_result,
execution_has_payments,
prepayment_return_control,
discount_closure,
registry_number,
check_needed,
additional_checks_status,
additional_checks_number,
has_payments,
loan_comment /*insert end*/,
upload_id,
modified_by)
  SELECT
    l.loan_id,
    /*select begin*/
    src.borrower_ssn,
    src.borrower_full_name,
    f_excel_str_to_date_en_us(src.birth_date),
    src.registration_address,
    f_excel_str_to_decimal_en_us(src.total_debt),
    f_excel_str_to_decimal_en_us(src.prepayment_amount),
    f_excel_str_to_decimal_en_us(src.prepayment_return_amount),
    f_excel_str_to_decimal_en_us(src.total_payments_amount),
    src.inscription_number,
    f_excel_str_to_date_uk(src.inscription_date),
    src.notary,
    f_excel_str_to_date_en_us(src.transfer_date),
    f_excel_str_to_date_en_us(src.prepayment_order_date),
    f_excel_str_to_date_en_us(src.prepayment_confirmation_date),
    src.region,
    src.private_executor_name,
    dls.loan_status_id,
    f_excel_str_to_date_en_us(src.documents_transfer_date),
    CAST(src.days_for_execution_opening AS int),
    CAST(src.days_for_salary_deduction_transfer AS int),
    f_excel_str_to_date_en_us(src.execution_opening_date),
    src.execution_number,
    src.access_id,
    LEFT(src.transferred_to_executor, 50),
    LEFT(src.execution_opened, 50),
    LEFT(src.salary_deduction_transferred, 50),
    LEFT(src.income_found, 50),
    LEFT(src.income_not_found, 50),
    LEFT(src.information_not_available, 50),
    f_excel_str_to_date_en_us(src.salary_deduction_document_date),
    LEFT(src.general_income_info, 50),
    LEFT(src.salary_deduction_fail_reason, 100),
    f_excel_str_to_date_en_us(src.income_check_second_request_date),
    src.income_check_second_request_result,
    src.execution_has_payments,
    src.prepayment_return_control,
    src.discount_closure,
    src.registry_number,
    CASE WHEN src.check_needed = 'так' THEN 1 ELSE 0 END,
    src.additional_checks_status,
    src.additional_checks_number,
    CASE WHEN src.has_payments = 'так' THEN 1 ELSE 0 END,
    src.comment /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_contragent_info src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    LEFT JOIN dim_loan_status dls
      ON src.loan_status = dls.loan_status_name
    LEFT JOIN loan_contragent_info trg
      ON l.loan_id = trg.loan_id
  WHERE src.loan_id IS NOT NULL
  AND trg.loan_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_loan_contragent_info`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_loan_contragent_info()
BEGIN

  SET @procedure_name = 'etl_loan_contragent_info';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_contragent_info LIMIT 1);

UPDATE staging_contragent_info src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
LEFT JOIN dim_loan_status dls
  ON src.loan_status = dls.loan_status_name
JOIN loan_contragent_info trg
  ON l.loan_id = trg.loan_id
SET trg.borrower_full_name = src.borrower_full_name,
    trg.birth_date = f_excel_str_to_date_en_us(src.birth_date),
    trg.total_debt = f_excel_str_to_decimal_en_us(src.total_debt),
    trg.inscription_number = src.inscription_number,
    trg.inscription_date = f_excel_str_to_date_uk(src.inscription_date),
    trg.notary_name = src.notary,
    trg.private_executor_name = src.private_executor_name,
    trg.execution_opening_date = f_excel_str_to_date_en_us(src.execution_opening_date),
    trg.access_id = src.access_id,
    trg.sal_deduction_document_date = f_excel_str_to_date_en_us(src.salary_deduction_document_date),
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO loan_contragent_info (loan_id,

borrower_ssn,
borrower_full_name,
birth_date,
registration_address,
total_debt,
prepayment_amount,
prepayment_return_amount,
total_payments_amount,
inscription_number,
inscription_date,
notary_name,
loan_transfer_date,
prepayment_order_date,
prepayment_confirmation_date,
region,
private_executor_name,
loan_status2_id,
documents_transfer_date,
days_for_execution_opening,
days_for_salary_deduction_transfer,
execution_opening_date,
execution_number,
access_id,
transferred_to_executor_status,
execution_opening_status,
sal_deduction_transferred_status,
income_found_status,
income_not_found_status,
information_not_available_status,
sal_deduction_document_date,
general_income_info,
sal_deduction_fail_reason,
income_check_second_request_date,
income_check_second_request_result,
execution_has_payments,
prepayment_return_control,
discount_closure,
registry_number,
check_needed,
additional_checks_status,
additional_checks_number,
has_payments,
loan_comment,
upload_id,
modified_by)
  SELECT
    l.loan_id,

    src.borrower_ssn,
    src.borrower_full_name,
    f_excel_str_to_date_en_us(src.birth_date),
    src.registration_address,
    f_excel_str_to_decimal_en_us(src.total_debt),
    f_excel_str_to_decimal_en_us(src.prepayment_amount),
    f_excel_str_to_decimal_en_us(src.prepayment_return_amount),
    f_excel_str_to_decimal_en_us(src.total_payments_amount),
    src.inscription_number,
    f_excel_str_to_date_uk(src.inscription_date),
    src.notary,
    f_excel_str_to_date_en_us(src.transfer_date),
    f_excel_str_to_date_en_us(src.prepayment_order_date),
    f_excel_str_to_date_en_us(src.prepayment_confirmation_date),
    src.region,
    src.private_executor_name,
    dls.loan_status_id,
    f_excel_str_to_date_en_us(src.documents_transfer_date),
    CAST(src.days_for_execution_opening AS int),
    CAST(src.days_for_salary_deduction_transfer AS int),
    f_excel_str_to_date_en_us(src.execution_opening_date),
    src.execution_number,
    src.access_id,
    LEFT(src.transferred_to_executor, 50),
    LEFT(src.execution_opened, 50),
    LEFT(src.salary_deduction_transferred, 50),
    LEFT(src.income_found, 50),
    LEFT(src.income_not_found, 50),
    LEFT(src.information_not_available, 50),
    f_excel_str_to_date_en_us(src.salary_deduction_document_date),
    LEFT(src.general_income_info, 50),
    LEFT(src.salary_deduction_fail_reason, 100),
    f_excel_str_to_date_en_us(src.income_check_second_request_date),
    src.income_check_second_request_result,
    src.execution_has_payments,
    src.prepayment_return_control,
    src.discount_closure,
    src.registry_number,
    CASE WHEN src.check_needed = 'так' THEN 1 ELSE 0 END,
    src.additional_checks_status,
    src.additional_checks_number,
    CASE WHEN src.has_payments = 'так' THEN 1 ELSE 0 END,
    src.comment,
    src.upload_id,
    src.user_id
  FROM staging_contragent_info src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    LEFT JOIN dim_loan_status dls
      ON src.loan_status = dls.loan_status_name
    LEFT JOIN loan_contragent_info trg
      ON l.loan_id = trg.loan_id
  WHERE src.loan_id IS NOT NULL
  AND trg.loan_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_loan`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_loan()
BEGIN

  SET @procedure_name = 'etl_loan';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_loan_initial_info LIMIT 1);

UPDATE staging_loan_initial_info src
JOIN dim_company dc
  ON src.company = dc.company_name
LEFT JOIN dim_loan_status dls
  ON src.loan_status = dls.loan_status_name
LEFT JOIN dim_letter_status dls1
  ON src.letter_status = dls1.letter_status_name
JOIN loan trg
  ON src.loan_id = trg.loan_id_ext
  AND dc.company_id = trg.company_id
JOIN borrower b
  ON trg.borrower_id = b.borrower_id
SET trg.loan_id_ext = src.loan_id,
    trg.priority = src.priority,
    trg.box_number = src.box_number,
    trg.contracts_count = src.contracts_count,
    trg.has_contract = src.has_contract,
    trg.loan_status_id = dls.loan_status_id,
    trg.letter_date = f_excel_str_to_date_en_us(src.letter_date),
    trg.loan_number = src.loan_number,
    trg.loan_date = f_excel_str_to_date_en_us(src.loan_date),
    trg.loan_amount = src.loan_amount,
    trg.last_payment_date = f_excel_str_to_date_en_us(src.last_payment_date),
    trg.letter_payoff_date = f_excel_str_to_date_en_us(src.letter_payoff_date),
    trg.total_debt_wo_pnlt = f_excel_str_to_decimal_en_us(src.total_debt_wo_penalty),
    trg.total_debt_wo_pnlt_w = src.total_debt_wo_penalty_words,
    trg.total_debt = f_excel_str_to_decimal_en_us(src.total_debt),
    trg.total_debt_w = src.total_debt_words,
    trg.principal_debt = f_excel_str_to_decimal_en_us(src.principal_debt),
    trg.principal_debt_w = src.principal_debt_words,
    trg.interest_debt = f_excel_str_to_decimal_en_us(src.interest_debt),
    trg.interest_debt_w = src.interest_debt_words,
    trg.commission_debt = f_excel_str_to_decimal_en_us(src.commission_debt),
    trg.commission_debt_w = src.commission_debt_words,
    trg.penalty_debt = f_excel_str_to_decimal_en_us(src.penalty_debt),
    trg.penalty_debt_w = src.penalty_debt_words,
    trg.inscription_cost = f_excel_str_to_decimal_en_us(src.inscription_cost),
    trg.inscription_cost_w = src.inscription_cost_words,
    trg.total_debt_w_inscr = f_excel_str_to_decimal_en_us(src.total_debt_w_inscription),
    trg.total_debt_w_inscr_w = src.total_debt_wInscription_words,
    trg.initial_creditor = src.initial_creditor,
    trg.initial_concession = src.initial_concession,
    trg.next_consession_aval = src.next_consession_aval,
    trg.fc_to_ams_concession = src.fct_to_ams_concession,
    trg.previous_creditor = src.previous_creditor,
    trg.current_creditor = src.current_creditor,
    trg.current_concession_number = src.current_concession_number,
    trg.current_concession_date = f_excel_str_to_date_en_us(src.current_concession_date),
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO loan (company_id,

borrower_id,
loan_id_ext,
priority,
box_number,
contracts_count,
has_contract,
loan_status_id,
letter_status_id,
letter_date,
loan_number,
loan_date,
loan_amount,
last_payment_date,
letter_payoff_date,
total_debt_wo_pnlt,
total_debt_wo_pnlt_w,
total_debt,
total_debt_w,
principal_debt,
principal_debt_w,
interest_debt,
interest_debt_w,
commission_debt,
commission_debt_w,
penalty_debt,
penalty_debt_w,
inscription_cost,
inscription_cost_w,
total_debt_w_inscr,
total_debt_w_inscr_w,
initial_creditor,
initial_concession,
next_consession_aval,
fc_to_ams_concession,
previous_creditor,
current_creditor,
current_concession_number,
current_concession_date,
upload_id,
modified_by)
  SELECT
    dc.company_id,

    b.borrower_id,
    src.loan_id AS loan_id_ext,
    src.priority,
    src.box_number,
    src.contracts_count,
    src.has_contract,
    dls.loan_status_id,
    dls1.letter_status_id,
    f_excel_str_to_date_en_us(src.letter_date) AS letter_date,
    src.loan_number,
    f_excel_str_to_date_en_us(src.loan_date) AS loan_date,
    src.loan_amount,
    f_excel_str_to_date_en_us(src.last_payment_date) AS last_payment_date,
    f_excel_str_to_date_en_us(src.letter_payoff_date) AS letter_payoff_date,
    f_excel_str_to_decimal_en_us(src.total_debt_wo_penalty) AS total_debt_wo_pnlt,
    src.total_debt_wo_penalty_words AS total_debt_wo_pnlt_w,
    f_excel_str_to_decimal_en_us(src.total_debt) AS total_debt,
    src.total_debt_words AS total_debt_w,
    f_excel_str_to_decimal_en_us(src.principal_debt) AS principal_debt,
    src.principal_debt_words AS principal_debt_w,
    f_excel_str_to_decimal_en_us(src.interest_debt) AS interest_debt,
    src.interest_debt_words AS interest_debt_w,
    f_excel_str_to_decimal_en_us(src.commission_debt) AS commission_debt,
    src.commission_debt_words AS commission_debt_w,
    f_excel_str_to_decimal_en_us(src.penalty_debt) AS penalty_debt,
    src.penalty_debt_words AS penalty_debt_w,
    f_excel_str_to_decimal_en_us(src.inscription_cost) AS inscription_cost,
    src.inscription_cost_words AS inscription_cost_w,
    f_excel_str_to_decimal_en_us(src.total_debt_w_inscription) AS total_debt_w_inscr,
    src.total_debt_wInscription_words AS total_debt_w_inscr_w,
    src.initial_creditor,
    src.initial_concession,
    src.next_consession_aval,
    src.fct_to_ams_concession,
    src.previous_creditor,
    src.current_creditor,
    src.current_concession_number,
    f_excel_str_to_date_en_us(src.current_concession_date) AS current_concession_date,
    src.upload_id,
    src.user_id
  FROM staging_loan_initial_info src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN borrower b
      ON IFNULL(src.borrower_ssn, src.loan_id) = b.borrower_id_ext
    LEFT JOIN dim_loan_status dls
      ON src.loan_status = dls.loan_status_name
    LEFT JOIN dim_letter_status dls1
      ON src.letter_status = dls1.letter_status_name
    LEFT JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
  WHERE src.loan_id IS NOT NULL
  AND dc.company_name IS NOT NULL
  AND l.loan_id IS NULL
  AND src.is_valid = 1;


  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

CALL etl_addresses_from_loan_info_file();

END
$$

--
-- Create procedure `etl_activity_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_activity_full()
BEGIN

  SET @procedure_name = 'etl_activity_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_activity sa LIMIT 1);

UPDATE staging_activity src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
JOIN dim_activity_type dat
  ON dat.activity_type_name = 'Incoming request'
JOIN activity trg
  ON l.loan_id = trg.loan_id
  AND f_excel_str_to_date_uk(src.activity_date) = trg.activity_date
  AND src.notes = trg.notes
SET  /*update begin*/
 trg.activity_type_id = (SELECT
     dat.activity_type_id
   FROM dim_activity_type dat
   WHERE dat.activity_type_name = 'Incoming request'),
 trg.activity_details = src.activity_details,
 trg.answer_date = f_excel_str_to_date_uk(src.answer_date),
 trg.borrower_full_name_ext = src.borrower_full_name,
 trg.borrower_ssn_ext = src.borrower_ssn,
 trg.loan_number_ext = src.loan_number,
 trg.loan_date_ext = f_excel_str_to_date_en_us(src.loan_date),
 trg.address = src.address,
 trg.debt_amount = f_excel_str_to_decimal_en_us(src.debt_amount),
 trg.bank = src.bank /*update end*/,
 trg.upload_id = src.upload_id,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO activity (/*insert begin*/
loan_id,
activity_type_id,
activity_date,
activity_details,
answer_date,
borrower_full_name_ext,
borrower_ssn_ext,
loan_number_ext,
loan_date_ext,
address,
debt_amount,
bank,
notes /*insert end*/,
upload_id,
modified_by)
  SELECT /*select begin*/
    l.loan_id,
    dat.activity_type_id,
    f_excel_str_to_date_uk(src.activity_date),
    src.activity_details,
    f_excel_str_to_date_uk(src.answer_date),
    src.borrower_full_name,
    src.borrower_ssn,
    src.loan_number,
    f_excel_str_to_date_en_us(src.loan_date),
    src.address,
    f_excel_str_to_decimal_en_us(src.debt_amount),
    src.bank,
    src.notes /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_activity src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    JOIN dim_activity_type dat
      ON dat.activity_type_name = 'Incoming request'
    LEFT JOIN activity a
      ON l.loan_id = a.loan_id
      AND f_excel_str_to_date_uk(src.activity_date) = a.activity_date
      AND src.notes = a.notes
  WHERE src.loan_id IS NOT NULL
  AND src.activity_date IS NOT NULL
  AND src.notes IS NOT NULL
  AND a.activity_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_activity`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_activity()
BEGIN

  SET @procedure_name = 'etl_activity';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_activity sa LIMIT 1);

UPDATE staging_activity src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON src.loan_id = l.loan_id_ext
  AND dc.company_id = l.company_id
JOIN dim_activity_type dat
  ON dat.activity_type_name = 'Incoming request'
JOIN activity trg
  ON l.loan_id = trg.loan_id
  AND f_excel_str_to_date_uk(src.activity_date) = trg.activity_date
  AND src.notes = trg.notes
SET trg.activity_details = src.activity_details,
    trg.answer_date = f_excel_str_to_date_uk(src.answer_date),
    trg.borrower_full_name_ext = src.borrower_full_name,
    trg.borrower_ssn_ext = src.borrower_ssn,
    trg.loan_number_ext = src.loan_number,
    trg.loan_date_ext = f_excel_str_to_date_en_us(src.loan_date),
    trg.address = src.address,
    trg.debt_amount = f_excel_str_to_decimal_en_us(src.debt_amount),
    trg.bank = src.bank,
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO activity (loan_id,
activity_type_id,
activity_date,
activity_details,
answer_date,
borrower_full_name_ext,
borrower_ssn_ext,
loan_number_ext,
loan_date_ext,
address,
debt_amount,
bank,
notes,
upload_id,
modified_by)
  SELECT
    l.loan_id,
    dat.activity_type_id,
    f_excel_str_to_date_uk(src.activity_date),
    src.activity_details,
    f_excel_str_to_date_uk(src.answer_date),
    src.borrower_full_name,
    src.borrower_ssn,
    src.loan_number,
    f_excel_str_to_date_en_us(src.loan_date),
    src.address,
    f_excel_str_to_decimal_en_us(src.debt_amount),
    src.bank,
    src.notes,
    src.upload_id,
    src.user_id
  FROM staging_activity src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON src.loan_id = l.loan_id_ext
      AND dc.company_id = l.company_id
    JOIN dim_activity_type dat
      ON dat.activity_type_name = 'Incoming request'
    LEFT JOIN activity a
      ON l.loan_id = a.loan_id
      AND f_excel_str_to_date_uk(src.activity_date) = a.activity_date
      AND src.notes = a.notes
  WHERE src.loan_id IS NOT NULL
  AND src.activity_date IS NOT NULL
  AND src.notes IS NOT NULL
  AND a.activity_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create function `f_excel_full_name_to_json`
--
CREATE 
	DEFINER = 'upload_service'@'%'
FUNCTION f_excel_full_name_to_json(_excel_full_name text)
  RETURNS LONGTEXT CHARSET utf8mb3
BEGIN

  DECLARE json_result json;
  DECLARE spaces_count int;
  DECLARE dashes_count int;
  DECLARE first_name varchar(25);
  DECLARE middle_name varchar(25);
  DECLARE last_name varchar(50);
  DECLARE full_name varchar(100);
  DECLARE temp_text varchar(100);
  DECLARE temp_part varchar(2);
  DECLARE i int DEFAULT 1;

  SET json_result = JSON_OBJECT('first_name', '', 'middle_name', '', 'last_name', '', 'full_name', '');

  
  SET _excel_full_name = TRIM(_excel_full_name);
  SET _excel_full_name = REPLACE(REPLACE(REPLACE(_excel_full_name, ' ', '<>'), '><', ''), '<>', ' ');

  SET spaces_count = CHAR_LENGTH(_excel_full_name) - CHAR_LENGTH(REPLACE(_excel_full_name, ' ', ''));
  SET dashes_count = CHAR_LENGTH(_excel_full_name) - CHAR_LENGTH(REPLACE(_excel_full_name, '-', ''));

  
  SET _excel_full_name = CONCAT(UCASE(LEFT(_excel_full_name, 1)), LCASE(SUBSTRING(_excel_full_name, 2)));
  WHILE i <= spaces_count DO
    SET temp_part = CONCAT(' ', LEFT(SUBSTRING_INDEX (_excel_full_name, ' ', -i), 1));
    SET _excel_full_name = REPLACE(_excel_full_name, temp_part, UCASE(temp_part));
    SET i = i + 1;
  END WHILE;

  SET i = 1;
  WHILE i <= dashes_count DO
    SET temp_part = CONCAT('-', LEFT(SUBSTRING_INDEX (_excel_full_name, '-', -i), 1));
    SET _excel_full_name = REPLACE(_excel_full_name, temp_part, UCASE(temp_part));
    SET i = i + 1;
  END WHILE;


  
  IF spaces_count = 0 THEN
    SET last_name = _excel_full_name;
    SET full_name = last_name;
    RETURN JSON_REPLACE(json_result, '$.last_name', last_name, '$.full_name', full_name);
  END IF;

  
  IF spaces_count = 1 THEN
    SET last_name = SUBSTRING_INDEX (_excel_full_name, ' ', 1);
    SET first_name = SUBSTRING_INDEX (_excel_full_name, ' ', -1);
    SET full_name = CONCAT(last_name, ' ', first_name);
    RETURN JSON_REPLACE(json_result, '$.last_name', last_name, '$.first_name', first_name, '$.full_name', full_name);
  END IF;

  SET last_name = SUBSTRING_INDEX (_excel_full_name, ' ', 1);
   
  SET middle_name = SUBSTRING_INDEX (_excel_full_name, ' ', -1);
   

  SET temp_text = SUBSTRING_INDEX (_excel_full_name, ' ', -spaces_count);
 
  SET first_name = SUBSTRING_INDEX (temp_text, ' ', spaces_count - 1);
   

  SET full_name = CONCAT(last_name, ' ', first_name, ' ', middle_name);

  RETURN JSON_REPLACE(json_result, '$.last_name', last_name, '$.first_name', first_name, '$.middle_name', middle_name, '$.full_name', full_name);

END
$$

--
-- Create procedure `etl_borrower_update`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_borrower_update()
BEGIN

  SET @procedure_name = 'etl_borrower_update';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_borrower_update_info LIMIT 1);

UPDATE borrower trg
JOIN staging_borrower_update_info src
  ON src.borrower_ssn = trg.borrower_id_ext
SET trg.first_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.first_name'),
    trg.middle_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.middle_name'),
    trg.last_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.last_name'),
    trg.full_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.full_name'),
    trg.work_place = src.work_place,
    trg.upload_id = src.upload_id,
    trg.is_manually_updated = 1
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

  SET @records_inserted = 0;

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_borrower_manual_update_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_borrower_manual_update_full()
BEGIN

  SET @procedure_name = 'etl_borrower_manual_update_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_borrower_update_info LIMIT 1);

UPDATE borrower trg
JOIN staging_borrower_update_info src
  ON src.borrower_ssn = trg.borrower_id_ext
SET /*update begin*/
 trg.first_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.first_name'),
 trg.middle_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.middle_name'),
 trg.last_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.last_name'),
 trg.full_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.full_name'),
 trg.birth_date = f_excel_str_to_date_en_us(src.birth_date),
 trg.birth_place = src.birth_place,
 trg.work_place = src.work_place,
 trg.passport_number = src.passport_number,
 trg.passport_issuer = src.passport_issuer /*update end*/,
 trg.upload_id = src.upload_id,
 trg.is_manually_updated = 1,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

  SET @records_inserted = 0;

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_borrower_manual_update`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_borrower_manual_update()
BEGIN

  SET @procedure_name = 'etl_borrower_manual_update';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_borrower_update_info LIMIT 1);

UPDATE borrower trg
JOIN staging_borrower_update_info src
  ON src.borrower_ssn = trg.borrower_id_ext
SET trg.first_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.first_name'),
    trg.middle_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.middle_name'),
    trg.last_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.last_name'),
    trg.full_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.full_name'),
    trg.work_place = src.work_place,
    trg.upload_id = src.upload_id,
    trg.is_manually_updated = 1
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

  SET @records_inserted = 0;

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_borrower_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_borrower_full()
BEGIN

  SET @procedure_name = 'etl_borrower_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_loan_initial_info LIMIT 1);

UPDATE borrower trg
JOIN staging_loan_initial_info src
  ON IFNULL(src.borrower_ssn, src.loan_id) = trg.borrower_id_ext
SET /*update begin*/
 trg.first_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.first_name'),
 trg.middle_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.middle_name'),
 trg.last_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.last_name'),
 trg.full_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.full_name'),
 trg.birth_date = f_excel_str_to_date_en_us(src.birth_date),
 trg.birth_place = src.birth_place,
 trg.work_place = LEFT(src.work_place, 255),
 trg.passport_number = src.passport_number,
 trg.passport_issuer = src.passport_issuer /*update end*/,
 trg.upload_id = src.upload_id,
 trg.is_manually_updated = 0,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO borrower (/*insert begin*/
borrower_id_ext,
ssn,
first_name,
middle_name,
last_name,
full_name,
birth_date,
birth_place,
work_place,
passport_number,
passport_issuer /*insert end*/,
upload_id, is_manually_updated,
modified_by)
  SELECT /*select begin*/
    IFNULL(src.borrower_ssn, src.loan_id) AS borrower_id_ext,
    src.borrower_ssn AS ssn,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.first_name') AS first_name,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.middle_name') AS middle_name,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.last_name') AS last_name,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.full_name') AS full_name,
    f_excel_str_to_date_en_us(src.birth_date) AS birth_date,
    src.birth_place,
    LEFT(src.work_place, 255) AS work_place,
    src.passport_number,
    src.passport_issuer /*select end*/,
    src.upload_id,
    0,
    src.user_id
  FROM (SELECT
      src.loan_id,
      src.borrower_ssn,
      src.borrower_full_name,
      src.birth_date,
      src.birth_place,
      src.work_place,
      src.passport_number,
      src.passport_issuer,
      src.upload_id,
      src.user_id,
      ROW_NUMBER() OVER (PARTITION BY IFNULL(src.borrower_ssn, src.loan_id) ORDER BY b.upload_id) AS r
    FROM staging_loan_initial_info src
      LEFT JOIN borrower b
        ON IFNULL(src.borrower_ssn, src.loan_id) = b.borrower_id_ext
    WHERE IFNULL(src.borrower_ssn, src.loan_id) IS NOT NULL
    AND b.borrower_id IS NULL
    AND src.is_valid = 1) AS src
  WHERE src.r = 1;

  SET @records_inserted = ROW_COUNT();

-- restore last manually updated version as active
UPDATE borrower b
JOIN (SELECT
    ROW_NUMBER() OVER (PARTITION BY b.borrower_id ORDER BY b.row_end DESC) AS r,
    b.borrower_id,
    b.borrower_id_ext,
    b.ssn,
    b.first_name,
    b.middle_name,
    b.last_name,
    b.full_name,
    b.birth_date,
    b.birth_place,
    b.work_place,
    b.passport_number,
    b.passport_issuer,
    b.passport_issue_date,
    b.is_manually_updated,
    b.upload_id,
    b.modified_by
  FROM borrower FOR SYSTEM_TIME ALL AS b
  WHERE is_manually_updated = 1) AS bm
  ON b.borrower_id = bm.borrower_id
  AND bm.r = 1
SET b.borrower_id_ext = bm.borrower_id_ext,
    b.ssn = bm.ssn,
    b.first_name = bm.first_name,
    b.middle_name = bm.middle_name,
    b.last_name = bm.last_name,
    b.full_name = bm.full_name,
    b.birth_date = bm.birth_date,
    b.birth_place = bm.birth_place,
    b.work_place = bm.work_place,
    b.passport_number = bm.passport_number,
    b.passport_issuer = bm.passport_issuer,
    b.passport_issue_date = bm.passport_issue_date,
    b.is_manually_updated = bm.is_manually_updated,
    b.upload_id = bm.upload_id,
    b.modified_by = bm.modified_by
WHERE b.is_manually_updated = 0;
  

  IF @upload_id IS NOT NULL AND 
     @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_borrower`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_borrower()
BEGIN

  SET @procedure_name = 'etl_borrower';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_loan_initial_info LIMIT 1);

UPDATE borrower trg
JOIN staging_loan_initial_info src
  ON IFNULL(src.borrower_ssn, src.loan_id) = trg.borrower_id_ext
SET trg.first_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.first_name'),
    trg.middle_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.middle_name'),
    trg.last_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.last_name'),
    trg.full_name = JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.full_name'),
    trg.birth_date = f_excel_str_to_date_en_us(src.birth_date),
    trg.birth_place = src.birth_place,
    trg.work_place = LEFT(src.work_place, 255),
    trg.passport_number = src.passport_number,
    trg.passport_issuer = src.passport_issuer,
    trg.upload_id = src.upload_id,
    trg.is_manually_updated = 0,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO borrower (borrower_id_ext,
ssn,
first_name,
middle_name,
last_name,
full_name,
birth_date,
birth_place,
work_place,
passport_number,
passport_issuer,
upload_id, is_manually_updated,
modified_by)
  SELECT
    IFNULL(src.borrower_ssn, src.loan_id) AS borrower_id_ext,
    src.borrower_ssn AS ssn,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.first_name') AS first_name,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.middle_name') AS middle_name,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.last_name') AS last_name,
    JSON_VALUE (f_excel_full_name_to_json(src.borrower_full_name), '$.full_name') AS full_name,
    f_excel_str_to_date_en_us(src.birth_date) AS birth_date,
    src.birth_place,
    LEFT(src.work_place, 255) AS work_place,
    src.passport_number,
    src.passport_issuer,
    src.upload_id,
    0,
    src.user_id
  FROM (SELECT
      src.loan_id,
      src.borrower_ssn,
      src.borrower_full_name,
      src.birth_date,
      src.birth_place,
      src.work_place,
      src.passport_number,
      src.passport_issuer,
      src.upload_id,
      src.user_id,
      ROW_NUMBER() OVER (PARTITION BY IFNULL(src.borrower_ssn, src.loan_id) ORDER BY b.upload_id) AS r
    FROM staging_loan_initial_info src
      LEFT JOIN borrower b
        ON IFNULL(src.borrower_ssn, src.loan_id) = b.borrower_id_ext
    WHERE IFNULL(src.borrower_ssn, src.loan_id) IS NOT NULL
    AND b.borrower_id IS NULL
    AND src.is_valid = 1) AS src
  WHERE src.r = 1;

  SET @records_inserted = ROW_COUNT();


UPDATE borrower b
JOIN (SELECT
    ROW_NUMBER() OVER (PARTITION BY b.borrower_id ORDER BY b.row_end DESC) AS r,
    b.borrower_id,
    b.borrower_id_ext,
    b.ssn,
    b.first_name,
    b.middle_name,
    b.last_name,
    b.full_name,
    b.birth_date,
    b.birth_place,
    b.work_place,
    b.passport_number,
    b.passport_issuer,
    b.passport_issue_date,
    b.is_manually_updated,
    b.upload_id,
    b.modified_by
  FROM borrower FOR SYSTEM_TIME ALL AS b
  WHERE is_manually_updated = 1) AS bm
  ON b.borrower_id = bm.borrower_id
  AND bm.r = 1
SET b.borrower_id_ext = bm.borrower_id_ext,
    b.ssn = bm.ssn,
    b.first_name = bm.first_name,
    b.middle_name = bm.middle_name,
    b.last_name = bm.last_name,
    b.full_name = bm.full_name,
    b.birth_date = bm.birth_date,
    b.birth_place = bm.birth_place,
    b.work_place = bm.work_place,
    b.passport_number = bm.passport_number,
    b.passport_issuer = bm.passport_issuer,
    b.passport_issue_date = bm.passport_issue_date,
    b.is_manually_updated = bm.is_manually_updated,
    b.upload_id = bm.upload_id,
    b.modified_by = bm.modified_by
WHERE b.is_manually_updated = 0;
  

  IF @upload_id IS NOT NULL AND 
     @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

DELIMITER ;

--
-- Create table `excel_mapping`
--
CREATE TABLE excel_mapping (
  company_name VARCHAR(50) NOT NULL,
  source_file_name VARCHAR(250) NOT NULL,
  source_field_name VARCHAR(250) NOT NULL,
  target_table_name VARCHAR(64) NOT NULL,
  target_field_name VARCHAR(64) NOT NULL,
  is_key_field BIT(1) NOT NULL DEFAULT b'0',
  target_data_type ENUM('string','datetime','int','decimal') DEFAULT NULL,
  min_length INT(11) DEFAULT NULL,
  max_lenght INT(11) DEFAULT NULL,
  min_value INT(11) DEFAULT NULL,
  max_value INT(11) DEFAULT NULL,
  datetime_format VARCHAR(30) DEFAULT NULL,
  regex_pattern VARCHAR(500) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 160,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `uc_source_dest` on table `excel_mapping`
--
ALTER TABLE excel_mapping 
  ADD UNIQUE INDEX uc_source_dest(company_name, source_file_name, source_field_name, target_table_name, target_field_name);

DELIMITER $$

--
-- Create procedure `populate_dimensions`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE populate_dimensions()
BEGIN


INSERT INTO dim_company (company_name)
  SELECT DISTINCT
    em.company_name
  FROM excel_mapping em
    LEFT JOIN dim_company dc
      ON em.company_name = dc.company_name
  WHERE dc.company_id IS NULL;


INSERT INTO dim_loan_status (loan_status_name)
  SELECT DISTINCT
    slii.loan_status
  FROM staging_loan_initial_info slii
    LEFT JOIN dim_loan_status dls
      ON slii.loan_status = dls.loan_status_name
  WHERE slii.loan_status IS NOT NULL
  AND dls.loan_status_id IS NULL;

INSERT INTO dim_loan_status (loan_status_name)
  SELECT DISTINCT
    sci.loan_status
  FROM staging_contragent_info sci
    LEFT JOIN dim_loan_status dls
      ON sci.loan_status = dls.loan_status_name
  WHERE sci.loan_status IS NOT NULL
  AND dls.loan_status_id IS NULL;


INSERT INTO dim_letter_status (letter_status_name)
  SELECT DISTINCT
    slii.letter_status
  FROM staging_loan_initial_info slii
    LEFT JOIN dim_letter_status dls
      ON slii.letter_status = dls.letter_status_name
  WHERE slii.letter_status IS NOT NULL
  AND dls.letter_status_id IS NULL;


INSERT INTO dim_address_type (address_type_name)
  SELECT DISTINCT
    sa.address_type
  FROM staging_address sa
    LEFT JOIN dim_address_type dat
      ON sa.address_type = dat.address_type_name
  WHERE sa.address_type IS NOT NULL
  AND dat.address_type_id IS NULL;


INSERT INTO dim_payment_type (payment_type_name)
  SELECT DISTINCT
    sp.payment_type
  FROM staging_payment sp
    LEFT JOIN dim_payment_type dpt
      ON sp.payment_type = dpt.payment_type_name
  WHERE sp.payment_type IS NOT NULL
  AND dpt.payment_type_id IS NULL;


INSERT INTO dim_match_type (match_type_name)
  SELECT DISTINCT
    sp.match_type
  FROM staging_payment sp
    LEFT JOIN dim_match_type dmt
      ON sp.match_type = dmt.match_type_name
  WHERE sp.match_type IS NOT NULL
  AND dmt.match_type_id IS NULL;


INSERT INTO dim_phone_type (phone_type_name)
  SELECT DISTINCT
    sp.phone_type
  FROM staging_phone sp
    LEFT JOIN dim_phone_type dpt
      ON sp.phone_type = dpt.phone_type_name
  WHERE sp.phone_type IS NOT NULL
  AND dpt.phone_type_id IS NULL;


INSERT INTO dim_phone_status (phone_status_name)
  SELECT DISTINCT
    sp.phone_status
  FROM staging_phone sp
    LEFT JOIN dim_phone_status dps
      ON sp.phone_status = dps.phone_status_name
  WHERE sp.phone_status IS NOT NULL
  AND dps.phone_status_id IS NULL;

END
$$

DELIMITER ;

--
-- Create table `dim_logged_info_type`
--
CREATE TABLE dim_logged_info_type (
  logged_info_type_id TINYINT(3) UNSIGNED NOT NULL AUTO_INCREMENT,
  logged_info_type_name VARCHAR(30) NOT NULL,
  PRIMARY KEY (logged_info_type_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create index `logged_info_type_name` on table `dim_logged_info_type`
--
ALTER TABLE dim_logged_info_type 
  ADD UNIQUE INDEX logged_info_type_name(logged_info_type_name);

--
-- Create table `service_log`
--
CREATE TABLE service_log (
  service_log_id BIGINT(20) NOT NULL AUTO_INCREMENT,
  execution_id BIGINT(20) NOT NULL,
  logged_info_type_id TINYINT(3) UNSIGNED NOT NULL,
  log_message VARCHAR(1024) DEFAULT NULL,
  logged_at TIMESTAMP(3) NOT NULL DEFAULT current_timestamp(3),
  PRIMARY KEY (service_log_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 22705,
AVG_ROW_LENGTH = 1272,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE service_log 
  ADD CONSTRAINT service_log_ibfk_1 FOREIGN KEY (logged_info_type_id)
    REFERENCES dim_logged_info_type(logged_info_type_id);

DELIMITER $$

--
-- Create procedure `log_service_action`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE log_service_action(IN _execution_id bigint,
IN _logged_info_type varchar(30),
IN _log_message varchar(1024))
BEGIN

INSERT INTO service_log (execution_id, logged_info_type_id, log_message)
  SELECT
    _execution_id,
    dlit.logged_info_type_id,
    _log_message
  FROM dim_logged_info_type dlit
  WHERE dlit.logged_info_type_name = _logged_info_type;

END
$$

--
-- Create function `f_clean_phone_number`
--
CREATE 
	DEFINER = 'upload_service'@'%'
FUNCTION f_clean_phone_number(_phone_number text,
_country_code varchar(5), 
_max_lenght int)
  RETURNS VARCHAR(18) CHARSET utf8mb3
BEGIN

  
  SET _phone_number = REGEXP_REPLACE(_phone_number, '[^0-9]', '');

  SET @country_code_lenght = CHAR_LENGTH(_country_code);
  SET @actual_phone_lenght = CHAR_LENGTH(_phone_number);
  SET @correct_phone_lenght = _max_lenght - @country_code_lenght;

  IF @actual_phone_lenght = @correct_phone_lenght THEN
    RETURN CONCAT(_country_code, _phone_number);
  END IF;

  IF @actual_phone_lenght > @correct_phone_lenght
    AND LEFT(_phone_number, @actual_phone_lenght - @correct_phone_lenght) = RIGHT(_country_code, @actual_phone_lenght - @correct_phone_lenght) THEN
    RETURN CONCAT(_country_code, RIGHT(_phone_number, @correct_phone_lenght));
  END IF;

  RETURN _phone_number;

END
$$

--
-- Create procedure `etl_phone_full`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_phone_full()
BEGIN

  SET @procedure_name = 'etl_phone_full';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_phone LIMIT 1);

UPDATE staging_phone src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON dc.company_id = l.company_id
  AND src.loan_id = l.loan_id_ext
LEFT JOIN dim_phone_type dpt
  ON src.phone_type = dpt.phone_type_name
LEFT JOIN dim_phone_status dps
  ON src.phone_status = dps.phone_status_name
JOIN phone trg
  ON l.borrower_id = trg.borrower_id
  AND f_clean_phone_number(src.phone_number, '380', 12) = trg.phone_number
SET /*update begin*/
 trg.phone_number = f_clean_phone_number(src.phone_number, '380', 12),
 trg.phone_type_id = dpt.phone_type_id,
 trg.phone_status_id = dps.phone_status_id,
 trg.last_rpc_date = f_excel_str_to_date_en_us(src.last_rpc_date),
 trg.last_ptp_date = f_excel_str_to_date_en_us(src.last_ptp_date),
 trg.comment = src.comment,
 trg.priority = src.priority /*update end*/,
 trg.upload_id = src.upload_id,
 trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO phone (/*insert begin*/
borrower_id,
phone_number,
phone_type_id,
phone_status_id,
last_rpc_date,
last_ptp_date,
comment,
priority /*insert end*/,
upload_id,
modified_by)
  SELECT /*select begin*/
    l.borrower_id,
    f_clean_phone_number(src.phone_number, '380', 12),
    dpt.phone_type_id,
    dps.phone_status_id,
    f_excel_str_to_date_en_us(src.last_rpc_date),
    f_excel_str_to_date_en_us(src.last_ptp_date),
    src.comment,
    src.priority /*select end*/,
    src.upload_id,
    src.user_id
  FROM staging_phone src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON dc.company_id = l.company_id
      AND src.loan_id = l.loan_id_ext
    LEFT JOIN dim_phone_type dpt
      ON src.phone_type = dpt.phone_type_name
    LEFT JOIN dim_phone_status dps
      ON src.phone_status = dps.phone_status_name
    LEFT JOIN phone p
      ON l.borrower_id = p.borrower_id
      AND f_clean_phone_number(src.phone_number, '380', 12) = p.phone_number
  WHERE src.phone_number IS NOT NULL
  AND p.phone_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_phone`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_phone()
BEGIN

  SET @procedure_name = 'etl_phone';
  SET @upload_id = ( SELECT
    upload_id
  FROM staging_phone LIMIT 1);

UPDATE staging_phone src
JOIN dim_company dc
  ON src.company = dc.company_name
JOIN loan l
  ON dc.company_id = l.company_id
  AND src.loan_id = l.loan_id_ext
LEFT JOIN dim_phone_type dpt
  ON src.phone_type = dpt.phone_type_name
LEFT JOIN dim_phone_status dps
  ON src.phone_status = dps.phone_status_name
JOIN phone trg
  ON l.borrower_id = trg.borrower_id
  AND f_clean_phone_number(src.phone_number, '380', 12) = trg.phone_number
SET trg.phone_number = f_clean_phone_number(src.phone_number, '380', 12),
    trg.last_rpc_date = f_excel_str_to_date_en_us(src.last_rpc_date),
    trg.last_ptp_date = f_excel_str_to_date_en_us(src.last_ptp_date),
    trg.comment = src.comment,
    trg.priority = src.priority,
    trg.upload_id = src.upload_id,
    trg.modified_by = src.user_id
WHERE src.upload_id > trg.upload_id
AND src.is_valid = 1;

  SET @records_updated = ROW_COUNT();

INSERT INTO phone (borrower_id,
phone_number,
phone_type_id,
phone_status_id,
last_rpc_date,
last_ptp_date,
comment,
priority,
upload_id,
modified_by)
  SELECT
    l.borrower_id,
    f_clean_phone_number(src.phone_number, '380', 12),
    dpt.phone_type_id,
    dps.phone_status_id,
    f_excel_str_to_date_en_us(src.last_rpc_date),
    f_excel_str_to_date_en_us(src.last_ptp_date),
    src.comment,
    src.priority,
    src.upload_id,
    src.user_id
  FROM staging_phone src
    JOIN dim_company dc
      ON src.company = dc.company_name
    JOIN loan l
      ON dc.company_id = l.company_id
      AND src.loan_id = l.loan_id_ext
    LEFT JOIN dim_phone_type dpt
      ON src.phone_type = dpt.phone_type_name
    LEFT JOIN dim_phone_status dps
      ON src.phone_status = dps.phone_status_name
    LEFT JOIN phone p
      ON l.borrower_id = p.borrower_id
      AND f_clean_phone_number(src.phone_number, '380', 12) = p.phone_number
  WHERE src.phone_number IS NOT NULL
  AND p.phone_id IS NULL
  AND src.is_valid = 1;

  SET @records_inserted = ROW_COUNT();

  IF @upload_id IS NOT NULL
    AND @upload_id > ( SELECT
    IFNULL(MAX(updload_id), 0)
  FROM etl_log
  WHERE stored_procedure_name = @procedure_name) THEN
INSERT INTO etl_log (stored_procedure_name, records_inserted, records_updated, updload_id)
  VALUES (@procedure_name, @records_inserted, @records_updated, @upload_id);
END IF;

END
$$

--
-- Create procedure `etl_Company3_master`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_Company3_master()
BEGIN

CALL populate_dimensions();
CALL etl_borrower();
CALL etl_borrower_manual_update();
CALL etl_loan();
CALL etl_loan_contragent_info();
CALL etl_address();
CALL etl_phone();
CALL etl_payment();
CALL etl_activity();
CALL etl_trial();
CALL etl_loan_expenses();

CALL process_payments();

END
$$

--
-- Create procedure `etl_Company2_master`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_Company2_master()
BEGIN

CALL populate_dimensions();
CALL etl_borrower();
CALL etl_borrower_manual_update();
CALL etl_loan();
CALL etl_loan_contragent_info();
CALL etl_address();
CALL etl_phone();
CALL etl_payment();
CALL etl_activity();
CALL etl_trial();
CALL etl_loan_expenses();

CALL process_payments();

END
$$

--
-- Create procedure `etl_Company1_master`
--
CREATE 
	DEFINER = 'upload_service'@'%'
PROCEDURE etl_Company1_master()
BEGIN

CALL populate_dimensions();
CALL etl_borrower();
CALL etl_borrower_manual_update();
CALL etl_loan();
CALL etl_loan_contragent_info();
CALL etl_address();
CALL etl_phone();
CALL etl_payment();
CALL etl_activity();
CALL etl_trial();
CALL etl_loan_expenses();

CALL process_payments();

END
$$

DELIMITER ;

--
-- Create table `etl_settings`
--
CREATE TABLE etl_settings (
  staging_table_name VARCHAR(64) NOT NULL,
  full_etl_name VARCHAR(64) NOT NULL,
  PRIMARY KEY (staging_table_name, full_etl_name)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1638,
CHARACTER SET utf8mb3,
COLLATE utf8mb3_general_ci,
ROW_FORMAT = DYNAMIC;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;